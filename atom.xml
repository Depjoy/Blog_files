<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秋过冬漫长</title>
  <subtitle>没有比脚更长的路，走下去，前面是个天！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chaooo.github.io/"/>
  <updated>2016-06-27T06:44:00.026Z</updated>
  <id>http://chaooo.github.io/</id>
  
  <author>
    <name>郑超(Charles)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NodeJs学习笔记</title>
    <link href="http://chaooo.github.io/2016/06/27/NodeJs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>http://chaooo.github.io/2016/06/27/NodeJs学习笔记.html</id>
    <published>2016-06-27T03:55:07.000Z</published>
    <updated>2016-06-27T06:44:00.026Z</updated>
    
    <content type="html">&lt;h3 id=&quot;1、Node-js创建第一个应用&quot;&gt;&lt;a href=&quot;#1、Node-js创建第一个应用&quot; class=&quot;headerlink&quot; title=&quot;1、Node.js创建第一个应用&quot;&gt;&lt;/a&gt;1、Node.js创建第一个应用&lt;/h3&gt;&lt;h4 id=&quot;1-1、创建服务器&quot;&gt;&lt;a href=&quot;#1-1、创建服务器&quot; class=&quot;headerlink&quot; title=&quot;1.1、创建服务器&quot;&gt;&lt;/a&gt;1.1、创建服务器&lt;/h4&gt;&lt;p&gt;使用 http.createServer() 方法创建服务器，并使用 listen 方法绑定 8888 端口。 函数通过 request, response 参数来接收和响应数据。实例如下，在项目的根目录下创建一个叫 server.js 的文件，并写入以下代码：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;http&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//引入require模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;require, response&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//发送 HTTP 头部&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//HTTP 状态值：200：OK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//内容类型：text/plain&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  response.writeHead(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;text/plain&#39;&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//发送响应数据：“Hello World”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  response.end(&lt;span class=&quot;string&quot;&gt;&#39;Hello World\n&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).listen(&lt;span class=&quot;number&quot;&gt;8888&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//终端打印如下信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Server running at http://127.0.0.1:8888/&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用 node 命令执行以上的代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node server.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server running at http://127.0.0.1:8888/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来，打开浏览器访问 &lt;code&gt;http://127.0.0.1:8888/&lt;/code&gt;，你会看到一个写着 “Hello World” 的网页。&lt;/p&gt;
&lt;h4 id=&quot;1-2、Node-js-事件循环&quot;&gt;&lt;a href=&quot;#1-2、Node-js-事件循环&quot; class=&quot;headerlink&quot; title=&quot;1.2、Node.js 事件循环&quot;&gt;&lt;/a&gt;1.2、Node.js 事件循环&lt;/h4&gt;&lt;p&gt;Node.js 有多个内置的事件，我们可以通过引入 events 模块，并通过实例化 EventEmitter 类来绑定和监听事件，如下实例：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//引入events模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; events = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;events&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//创建eventEmitter对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; eventEmitter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; events.EventEmitter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//创建时间处理程序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; connectHander = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;connected&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;连接成功。&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//触发data_received事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    eventEmitter.emit(&lt;span class=&quot;string&quot;&gt;&#39;data_received&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//绑定connection事件处理程序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  eventEmitter.on(&lt;span class=&quot;string&quot;&gt;&#39;connection&#39;&lt;/span&gt;, connectHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//使用匿名函数绑定data_received事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  eventEmitter.on(&lt;span class=&quot;string&quot;&gt;&#39;data_received&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;数据接收成功。&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//触发connection事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  eventEmitter.emit(&lt;span class=&quot;string&quot;&gt;&#39;connection&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;程序执行完毕。&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;##### node应用程序如何工作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;创建一个input.txt文件，内容如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Hello World;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;创建main.js文件，代码如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt; javascript&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;fs&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fs.readFile(&lt;span class=&quot;string&quot;&gt;&#39;input.txt&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(err.stack);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;程序执行完毕&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;以上程序中 fs.readFile() 是异步函数用于读取文件。 如果在读取文件过程中发生错误，错误 err 对象就会输出错误信息。如果没发生错误，readFile 跳过 err 对象的输出，文件内容就通过回调函数输出。执行以上代码，执行结果如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Hello World;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;接下来我们删除 input.txt 文件，执行结果如下所示：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  程序执行完毕&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;: ENOENT, open &lt;span class=&quot;string&quot;&gt;&#39;input.txt&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### 1.3、Node.js EventEmitter 类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Node.js里面的许多对象都会分发事件：一个net.Server 对象会在每次有新连接时分发一个事件， 一个fs.readStream 对象会在文件被打开的时候发出一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;events 模块只提供了一个对象： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你可以通过require(&quot;events&quot;);来访问该模块:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;  var events = require(‘events’);&lt;br&gt;  //创建eventEmitter对象&lt;br&gt;  var eventEmitter = new events.EventEmitter();&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;EventEmitter 对象如果在实例化时发生错误，会触发 &amp;apos;error&amp;apos; 事件。当添加新的监听器时，&amp;apos;newListener&amp;apos; 事件会触发，当监听器被移除时，&amp;apos;removeListener&amp;apos; 事件被触发。实例：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` javascript&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //event.js 文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var EventEmitter = require(&amp;apos;events&amp;apos;).EventEmitter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var event = new EventEmitter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  event.on(&amp;apos;some_event&amp;apos;,function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&amp;apos;some_event事件触发&amp;apos;)；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  setTimeout(function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    event.emit(&amp;apos;some_event&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, 1000);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行这段代码，1 秒后控制台输出了 &lt;code&gt;some_event 事件触发&lt;/code&gt;。其原理是 event 对象注册了事件 some_event 的一个监听器，然后我们通过 setTimeout 在 1000 毫秒以后向 event 对象发送事件 some_event，此时会调用some_event 的监听器&lt;br&gt;执行结果如下:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node event.js &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;some_event 事件触发&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;EventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，EventEmitter 支持 若干个事件监听器。当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//event.js 文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; events = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;events&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; emitter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; events.EventEmitter(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;emitter.on(&lt;span class=&quot;string&quot;&gt;&#39;someEvent&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arg1, arg2&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;listener1&#39;&lt;/span&gt;, arg1, arg2); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;emitter.on(&lt;span class=&quot;string&quot;&gt;&#39;someEvent&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arg1, arg2&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;listener2&#39;&lt;/span&gt;, arg1, arg2); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;emitter.emit(&lt;span class=&quot;string&quot;&gt;&#39;someEvent&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;arg1 参数&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;arg2 参数&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;emitter 为事件 someEvent 注册了两个事件监听器，然后触发了 someEvent 事件。运行结果中可以看到两个事件监听器回调函数被先后调用。 这就是EventEmitter最简单的用法。EventEmitter 提供了多个属性，如 on 和 emit。on 函数用于绑定事件函数，emit 属性用于触发一个事件。&lt;br&gt;执行结果如下:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node event.js &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;listener1 arg1 参数 arg2 参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;listener2 arg1 参数 arg2 参数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h5&gt;&lt;p&gt;1、&lt;code&gt;addListener(event, listener)&lt;/code&gt;//为指定事件添加一个监听器到监听数组的尾部&lt;br&gt;2、&lt;code&gt;on(event, listener)&lt;/code&gt;//为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数:&lt;br&gt;  &lt;code&gt;server.on(&amp;#39;connection&amp;#39;,function (stream) {
    console.log(&amp;#39;someone connected!&amp;#39;);
  });&lt;/code&gt;&lt;br&gt;3、&lt;code&gt;once(event, listener)&lt;/code&gt;//为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。&lt;br&gt;  &lt;code&gt;server.once(&amp;#39;connection&amp;#39;, function (stream) {
    console.log(&amp;#39;Ah, we have our first user!&amp;#39;);
  });&lt;/code&gt;&lt;br&gt;4、&lt;code&gt;removeListener(event, listener)&lt;/code&gt;//移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。&lt;br&gt;        var callback = function(stream) {&lt;br&gt;          console.log(‘someone connected!’);&lt;br&gt;        };&lt;br&gt;        server.on(‘connection’, callback);&lt;br&gt;        // …&lt;br&gt;        server.removeListener(‘connection’, callback);&lt;br&gt;      5、  removeAllListeners([event])//移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器。&lt;br&gt;      6、setMaxListeners(n)//默认情况下， EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 setMaxListeners 函数用于提高监听器的默认限制的数量。&lt;br&gt;      7、listeners(event)//返回指定事件的监听器数组&lt;br&gt;      8、emit(event, [arg1], [arg2], […])//按参数的顺序执行每个监听器，如果事件有注册监听返回 true，否则返回 false。&lt;br&gt;    /&lt;em&gt; 类方法 &lt;/em&gt;/&lt;br&gt;      1、listenerCount(emitter, event)//返回指定事件的监听器数量。&lt;br&gt;    /&lt;em&gt; 事件 &lt;/em&gt;/&lt;br&gt;      1、newListener //该事件再添加新监听器时被触发&lt;br&gt;        event - 字符串，事件名称&lt;br&gt;        listener - 处理事件函数&lt;br&gt;      2、removeListener//从指定监听器数组中删除一个监听器。需要注意的是，此操作将会改变处于被删监听器之后的那些监听器的索引。&lt;br&gt;        event - 字符串，事件名称&lt;br&gt;        listener - 处理事件函数&lt;br&gt;      /&lt;em&gt; 实例：通过 connection（连接）事件演示了 EventEmitter 类的应用 &lt;/em&gt;/&lt;br&gt;        // 创建main.js文件：&lt;br&gt;        var events = require(‘events’);&lt;br&gt;        var eventEmitter = new events.EventEmitter();&lt;br&gt;        // 监听器 #1&lt;br&gt;        var listener1 = function listener1() {&lt;br&gt;          console.log(‘监听器 listener1 执行。’);&lt;br&gt;        }&lt;br&gt;        // 监听器 #2&lt;br&gt;        var listener2 = function listener2() {&lt;br&gt;          console.log(‘监听器 listener2 执行。’);&lt;br&gt;        }&lt;br&gt;        // 绑定connection事件，处理函数为listener1&lt;br&gt;        eventEmitter.addListener(‘connection’,listener1);&lt;br&gt;        // 绑定connection事件，处理函数为listener2&lt;br&gt;        eventEmitter.on(‘connection’,listener2);&lt;br&gt;        var eventListeners = require(‘events’).EventEmitter.listenerCount(eventEmitter,’connection’);&lt;br&gt;        console.log(eventListeners + “个监听器连接事件”);&lt;br&gt;        //处理connection事件&lt;br&gt;        eventEmitter.emit(‘connection’);&lt;br&gt;        //移除监绑定的listener1函数&lt;br&gt;        eventEmitter.removeListener(‘connection’,listener1);&lt;br&gt;        console.log(“listener1不再受监听。”);&lt;br&gt;        //触发连接事件&lt;br&gt;        eventEmitter.emit(‘connection’);&lt;br&gt;        eventListeners = require(‘events’).EventEmitter.listenerCount(eventEmitter,’connection’);&lt;br&gt;        console.log(eventListeners + “个监听器连接事件”);&lt;br&gt;        console.log(“程序执行完毕。”);&lt;br&gt;        //执行结果：&lt;br&gt;        node main.js&lt;br&gt;          2个监听器连接事件&lt;br&gt;          监听器 listener1 执行。&lt;br&gt;          监听器 listener2 执行。&lt;br&gt;          listener1不再受监听。&lt;br&gt;          监听器 listener2 执行。&lt;br&gt;          1个监听器连接事件&lt;br&gt;          程序执行完毕。&lt;br&gt;    /&lt;em&gt; error事件 &lt;/em&gt;/&lt;br&gt;      // EventEmitter 定义了一个特殊的事件 error，它包含了错误的语义，我们在遇到 异常的时候通常会触发 error 事件。当 error 被触发时，EventEmitter 规定如果没有响 应的监听器，Node.js 会把它当作异常，退出程序并输出错误信息。我们一般要为会触发 error 事件的对象设置监听器，避免遇到错误后整个程序崩溃。&lt;br&gt;    /&lt;em&gt; 继承 EventEmitter &lt;/em&gt;/&lt;br&gt;      //大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。&lt;br&gt;        // 原因有两点：&lt;br&gt;        // -首先，具有某个实体功能的对象实现事件符合语义， 事件的监听和发射应该是一个对象的方法。&lt;br&gt;        // -其次 JavaScript 的对象机制是基于原型的，支持 部分多重继承，继承 EventEmitter 不会打乱对象原有的继承关系。&lt;/p&gt;
&lt;p&gt;/4、Node.js Buffer(缓冲区) &lt;em&gt;/&lt;br&gt;    //JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。一个 Buffer 类似于一个整数数组，但它对应于 V8 堆内存之外的一块原始内存。&lt;br&gt;    /&lt;/em&gt; 创建Buffer类 &lt;em&gt;/&lt;br&gt;      var buf = new Buffer(10);//创建长度为10字节的Buffer实例&lt;br&gt;      var buf = new Buffer([10, 20, 30, 40, 50]);//通过给定的数组创建Buffer实例&lt;br&gt;      var buf = new Buffer(“www.runoob.com”, “utf-8”);//通过一个字符串来创建Buffer实例&lt;br&gt;    /&lt;/em&gt; 写入缓冲区 &lt;em&gt;/&lt;br&gt;      buf.write(string, [offset], [length], [encoding]);&lt;br&gt;      /&lt;/em&gt;参数：&lt;br&gt;        string - 写入缓冲区的字符串。&lt;br&gt;        offset - 缓冲区开始写入的索引值，默认为0.&lt;br&gt;        length - 写入的字节数，默认为buffer.length&lt;br&gt;        encoding - 使用的编码。默认‘utf-8’&lt;br&gt;       &lt;em&gt;返回值：返回实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串。&lt;/em&gt;/&lt;br&gt;    /&lt;em&gt; 从缓冲区读取数据 &lt;/em&gt;/&lt;br&gt;      buf.toString([encoding], [start], [end]);&lt;br&gt;      /&lt;em&gt;参数：&lt;br&gt;        encoding - 使用的编码。默认‘utf-8’.&lt;br&gt;        start - 指定开始读取的索引位置，默认为0.&lt;br&gt;        end - 结束位置，默认缓冲区末尾。
       &lt;/em&gt;返回值：解码缓冲区数据并使用指定的编码返回字符串。&lt;em&gt;/&lt;br&gt;    /&lt;/em&gt; 将 Buffer 转换为 JSON 对象 &lt;em&gt;/&lt;br&gt;      buf.toJSON();&lt;br&gt;      //返回值：返回JSON对象。&lt;br&gt;    /&lt;/em&gt; 缓冲区合并 &lt;em&gt;/&lt;br&gt;      Buffer.concat(list, [totalLength]);&lt;br&gt;      /&lt;/em&gt;参数：&lt;br&gt;        list - 用于合并的Buffer对象数组列表。&lt;br&gt;        totalLength - 指定合并后Buffer对象的总长度。&lt;br&gt;       &lt;em&gt;返回值：返回一个多个成员合并的新 Buffer 对象。&lt;/em&gt;/&lt;br&gt;    /&lt;em&gt; 缓冲区比较 &lt;/em&gt;/&lt;br&gt;      buf.compare(otherBuffer);&lt;br&gt;      //返回值：返回一个数字，表示 buf 在 otherBuffer 之前，之后或相同。&lt;br&gt;    /&lt;em&gt; 拷贝缓冲区 &lt;/em&gt;/&lt;br&gt;      buf.copy(targetBuffer,[targetStart],[sourceStart],[sourceEnd]);&lt;br&gt;      /&lt;em&gt;参数：&lt;br&gt;        targetBuffer - 要拷贝的 Buffer 对象。&lt;br&gt;         targetStart - 数字, 可选, 默认: 0&lt;br&gt;         sourceStart - 数字, 可选, 默认: 0&lt;br&gt;           sourceEnd - 数字, 可选, 默认: buffer.length&lt;br&gt;      返回值：无。&lt;/em&gt;/&lt;br&gt;    /&lt;em&gt; 缓冲区剪裁 &lt;/em&gt;/&lt;br&gt;      buf.slice([start],[end]);&lt;br&gt;      /&lt;em&gt;参数：&lt;br&gt;        start - 数字, 可选, 默认: 0&lt;br&gt;        end - 数字, 可选, 默认: buffer.length&lt;br&gt;      返回值：返回一个新的缓冲区，它和旧缓冲区指向同一块内存，但是从索引 start 到 end 的位置剪切。&lt;/em&gt;/&lt;br&gt;    /&lt;em&gt; 缓冲区长度 &lt;/em&gt;/&lt;br&gt;      buf.length;&lt;br&gt;      //返回值：返回Buffer对象所占据的内存长度。&lt;br&gt;    /&lt;em&gt;* Node.js Buffer 模块常用的方法 &lt;/em&gt;/&lt;br&gt;      new Buffer(size);//分配一个新的 size 大小单位为8位字节的 buffer。 注意, size 必须小于 kMaxLength，否则，将会抛出异常 RangeError。&lt;br&gt;      new Buffer(buffer);//拷贝参数 buffer 的数据到 Buffer 实例。&lt;br&gt;      new Buffer(str, [encoding]);//分配一个新的 buffer ，其中包含着传入的 str 字符串。 encoding 编码方式默认为 ‘utf8’。&lt;br&gt;      buf.length;//返回这个 buffer 的 bytes 数。注意这未必是 buffer 里面内容的大小。length 是 buffer 对象所分配的内存数，它不会随着这个 buffer 对象内容的改变而改变。&lt;br&gt;      buf.toString([encoding], [start], [end]);//根据 encoding 参数（默认是 ‘utf8’）返回一个解码过的 string 类型。还会根据传入的参数 start (默认是 0) 和 end (默认是 buffer.length)作为取值范围。&lt;br&gt;      buf.toJSON();//将 Buffer 实例转换为 JSON 对象。&lt;br&gt;      buf[index];//获取或设置指定的字节。返回值代表一个字节，所以返回值的合法范围是十六进制0x00到0xFF 或者十进制0至 255。&lt;br&gt;      buf.equals(otherBuffer);//比较两个缓冲区是否相等，如果是返回 true，否则返回 false。&lt;br&gt;      buf.compare(otherBuffer);//比较两个 Buffer 对象，返回一个数字，表示 buf 在 otherBuffer 之前，之后或相同。&lt;br&gt;      buf.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd]);//buffer 拷贝，源和目标可以相同。 targetStart 目标开始偏移和 sourceStart 源开始偏移默认都是 0。 sourceEnd 源结束位置偏移默认是源的长度 buffer.length 。&lt;br&gt;      buf.slice([start, [end]]);//剪切 Buffer 对象，根据 start(默认是 0 ) 和 end (默认是 buffer.length ) 偏移和裁剪了索引。 负的索引是从 buffer 尾部开始计算的。&lt;br&gt;      buf.fill(value, [offset], [end]);//使用指定的 value 来填充这个 buffer。如果没有指定 offset (默认是 0) 并且 end (默认是 buffer.length) ，将会填充整个buffer。&lt;br&gt;      buf.write(string, [offset], [length], [encoding]);//根据参数 offset 偏移量和指定的 encoding 编码方式，将参数 string 数据写入buffer。 offset 偏移量默认值是 0, encoding 编码方式默认是 utf8。 length 长度是将要写入的字符串的 bytes 大小。 返回 number 类型，表示写入了多少 8 位字节流。如果 buffer 没有足够的空间来放整个 string，它将只会只写入部分字符串。 length 默认是 buffer.length - offset。 这个方法不会出现写入部分字符。&lt;br&gt;      buf.writeUIntLE(value, offset, byteLength, [noAssert]);//将value 写入到 buffer 里， 它由offset 和 byteLength 决定。noAssert 值为 true 时，不再验证 value 和 offset 的有效性。 默认是 false。/&lt;em&gt; 下同。&lt;/em&gt;/&lt;br&gt;      buf.writeUIntBE(value, offset, byteLength, [noAssert]);&lt;br&gt;      buf.writeUInt8(value, offset, [noAssert]);&lt;br&gt;      buf.writeUInt16LE(value, offset, [noAssert]);&lt;br&gt;      buf.writeUInt16BE(value, offset, [noAssert]);&lt;br&gt;      buf.writeUInt32LE(value, offset, [noAssert]);&lt;br&gt;      buf.writeUInt32BE(value, offset, [noAssert]);&lt;br&gt;      buf.writeIntLE(value, offset, byteLength, [noAssert]);&lt;br&gt;      buf.writeIntBE(value, offset, byteLength, [noAssert]);&lt;br&gt;      buf.writeInt8(value, offset, [noAssert]);&lt;br&gt;      buf.writeInt16LE(value, offset, [noAssert]);&lt;br&gt;      buf.writeInt16BE(value, offset, [noAssert]);&lt;br&gt;      buf.writeInt32LE(value, offset, [noAssert]);&lt;br&gt;      buf.writeInt32BE(value, offset, [noAssert]);&lt;br&gt;      buf.writeFloatLE(value, offset, [noAssert]);&lt;br&gt;      buf.writeFloatBE(value, offset, [noAssert]);&lt;br&gt;      buf.writeDoubleLE(value, offset, [noAssert]);&lt;br&gt;      buf.writeDoubleBE(value, offset, [noAssert]);&lt;br&gt;      buf.readUInt8(offset, [noAssert]);//读取。&lt;br&gt;      buf.readUInt16LE(offset, [noAssert]);&lt;br&gt;      buf.readUInt16BE(offset, [noAssert]);&lt;br&gt;      buf.readUInt32LE(offset, [noAssert]);&lt;br&gt;      buf.readUInt32BE(offset, [noAssert]);&lt;br&gt;      buf.readUIntLE(offset, byteLength, [noAssert]);&lt;br&gt;      buf.readUIntBE(offset, byteLength, [noAssert]);&lt;br&gt;      buf.readIntLE(offset, byteLength, [noAssert]);&lt;br&gt;      buf.readIntBE(offset, byteLength, [noAssert]);&lt;br&gt;      buf.readInt8(offset, [noAssert]);&lt;br&gt;      buf.readInt16LE(offset, [noAssert]);&lt;br&gt;      buf.readInt16BE(offset, [noAssert]);&lt;br&gt;      buf.readInt32LE(offset, [noAssert]);&lt;br&gt;      buf.readInt32BE(offset, [noAssert]);&lt;br&gt;      buf.readFloatLE(offset, [noAssert]);&lt;br&gt;      buf.readFloatBE(offset, [noAssert]);&lt;br&gt;      buf.readDoubleLE(offset, [noAssert]);&lt;br&gt;      buf.readDoubleBE(offset, [noAssert]);&lt;/p&gt;
&lt;p&gt;/5、Node.js Stream(流) &lt;em&gt;/&lt;br&gt;    //Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个 Stream，还有stdout（标准输出）。&lt;br&gt;    //Stream有四种流类型：&lt;br&gt;      Readable //可读操作。&lt;br&gt;      Writable //可写操作。&lt;br&gt;      Duplex   //可读写操作。&lt;br&gt;      Transform//操作被写入数据，然后读出数据。&lt;br&gt;    //所有的Stream对象都是EventEmitter的实例。&lt;br&gt;    //常用事件：&lt;br&gt;      data  //当有数据可读时触发。&lt;br&gt;      end   //没有更多数据可读时触发。&lt;br&gt;      error //在接收和写入过程中发生错误时触发。&lt;br&gt;      finish//所有数据已被写入到底层系统时触发。&lt;br&gt;    /&lt;/em&gt; 从流中读取数据实例&lt;em&gt;/&lt;br&gt;      //创建input.txt文件，内容自定。&lt;br&gt;      //创建main.js文件：&lt;br&gt;        var fs = require(“fs”);&lt;br&gt;        var data = ‘’;&lt;br&gt;        //创建可读流&lt;br&gt;        var readerStream = fs.createReadStream(‘input.txt’);&lt;br&gt;        //设置编码为 utf8。&lt;br&gt;        readerStream.setEncoding(‘UTF8’);&lt;br&gt;        //处理流事件–&amp;gt;data,end,and errror&lt;br&gt;        readerStream.on(‘data’,function(chunk){&lt;br&gt;          data += chunk;&lt;br&gt;        });&lt;br&gt;        readerStream.on(‘end’,function(){&lt;br&gt;          console.log(data);&lt;br&gt;        });&lt;br&gt;        readerStream.on(‘error’,function(err){&lt;br&gt;          console.log(err.stack);&lt;br&gt;        });&lt;br&gt;        console.log(“程序执行完毕”);&lt;br&gt;    /&lt;/em&gt; 写入流实例 &lt;em&gt;/&lt;br&gt;      //创建main.js文件：&lt;br&gt;        var fs = require(“fs”);&lt;br&gt;        var data = ‘我是被写入的数据’;&lt;br&gt;        //创建一个可以写入的流，写入到output.txt中&lt;br&gt;        var writerStream = fs.createWriteStream(‘output.txt’);&lt;br&gt;        //使用utf8编码写入数据&lt;br&gt;        writerStream.write(data,’UTF8’);&lt;br&gt;        //标记文件末尾&lt;br&gt;        writerStream.end();&lt;br&gt;        //处理流事件–&amp;gt;finish, errror&lt;br&gt;        readerStream.on(‘finish’,function(){&lt;br&gt;          console.log(“写入完成。”);&lt;br&gt;        });&lt;br&gt;        readerStream.on(‘error’,function(err){&lt;br&gt;          console.log(err.stack);&lt;br&gt;        });&lt;br&gt;        console.log(“程序执行完毕”);&lt;br&gt;    /&lt;/em&gt; 管道流实例 &lt;em&gt;/&lt;br&gt;      //创建input.txt文件，内容自定。&lt;br&gt;      //创建main.js文件：&lt;br&gt;        var fs = require(“fs”);&lt;br&gt;        //创建一个可读流&lt;br&gt;        var readerStream = fs.createReadStream(‘input.txt’);&lt;br&gt;        //创建一个可写流&lt;br&gt;        var writerStream = fs.createWriteStream(‘output.txt’);&lt;br&gt;        //管道读写操作，读取input.txt内容，并写入到output.txt文件中。&lt;br&gt;        readerStream.pipe(writerStream);&lt;br&gt;        console.log(“程序执行完毕”);&lt;br&gt;    /&lt;/em&gt; 链式流实例 */&lt;br&gt;      //创建compress.js文件：&lt;br&gt;        var fs = require(“fs”);&lt;br&gt;        var zlib = require(‘zlib’);&lt;br&gt;        //压缩input.txt文件为input.txt.gz&lt;br&gt;        fs.createReadStream(‘input.txt’).pipe(zlib.createGzip()).pipe(fs.createWriteStream(‘input.txt.gz’));&lt;br&gt;        console.log(“文件压缩完成。”);&lt;br&gt;      //执行完以上操作后，我们可以看到当前目录下生成了 input.txt 的压缩文件 input.txt.gz。接下来，让我们来解压该文件&lt;br&gt;      //创建 decompress.js 文件:&lt;br&gt;        var fs = require(“fs”);&lt;br&gt;        var zlib = require(‘zlib’);&lt;br&gt;        //解压input.txt.gz文件为input.txt&lt;br&gt;        fs.createReadStream(‘input.txt.gz’).pipe(zlib.createGunzip()).pipe(fs.createWriteStream(‘input.txt’));&lt;br&gt;        console.log(“文件解压完成。”); &lt;/p&gt;
&lt;p&gt;/6、Node.js模块系统 &lt;em&gt;/&lt;br&gt;    //Node.js 提供了exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。&lt;br&gt;    //实例：&lt;br&gt;      //hello.js&lt;br&gt;      function Hello(){&lt;br&gt;        var name;&lt;br&gt;        this.setName = function(thyName){&lt;br&gt;          name = thyName;&lt;br&gt;        };&lt;br&gt;        this.sayHello = function(){&lt;br&gt;          console.log(‘Hello ‘+ name);&lt;br&gt;        };&lt;br&gt;      };&lt;br&gt;      module.exports = Hello;&lt;br&gt;      //main.js&lt;br&gt;      var Hello = require(‘./hello’);&lt;br&gt;      hello = new Hello();&lt;br&gt;      hello.setName(‘BYVoid’);&lt;br&gt;      hello.sayHello();&lt;br&gt;    /&lt;/em&gt; 服务端的模块放在哪里 &lt;em&gt;/&lt;br&gt;      //我们已经在代码中使用了模块了。像这样：&lt;br&gt;        var http = require(“http”);&lt;br&gt;        …&lt;br&gt;        http.createServer(…);&lt;br&gt;        // Node.js中自带了一个叫做”http”的模块，我们在我们的代码中请求它并把返回值赋给一个本地变量。这把我们的本地变量变成了一个拥有所有 http 模块所提供的公共方法的对象。&lt;br&gt;        //Node.js 的 require方法中的文件查找策略如下：&lt;br&gt;        开始require–&amp;gt;&lt;br&gt;          if (在文件模块缓存区中) {&lt;br&gt;            返回exports.&lt;br&gt;          } else{&lt;br&gt;            if (是原生模块) {&lt;br&gt;              if (在原生模块缓存区中) {&lt;br&gt;                返回exports.&lt;br&gt;              } else{&lt;br&gt;                加载原生模块–&amp;gt;缓存原生模块–&amp;gt;返回exports.&lt;br&gt;              };&lt;br&gt;            } else{&lt;br&gt;              查找文件模块–&amp;gt;根据扩展名载入文件模块–&amp;gt;缓存文件模块–&amp;gt;返回exports.&lt;br&gt;            };&lt;br&gt;          };&lt;br&gt;      /&lt;/em&gt; 从文件模块缓存中加载 &lt;em&gt;/&lt;br&gt;        //尽管原生模块与文件模块的优先级不同，但是都不会优先于从文件模块的缓存中加载已经存在的模块。&lt;br&gt;      /&lt;/em&gt; 从原生模块加载 &lt;em&gt;/&lt;br&gt;        //原生模块的优先级仅次于文件模块缓存的优先级。require方法在解析文件名之后，优先检查模块是否在原生模块列表中。以http模块为例，尽管在目录下存在一个http/http.js/http.node/http.json文件，require(“http”)都不会从这些文件中加载，而是从原生模块中加载。原生模块也有一个缓存区，同样也是优先从缓存区加载。如果缓存区没有被加载过，则调用原生模块的加载方式进行加载和执行。&lt;br&gt;      /&lt;/em&gt; 从文件加载 */&lt;br&gt;        //当文件模块缓存中不存在，而且不是原生模块的时候，Node.js会解析require方法传入的参数，并从文件系统中加载实际的文件，加载过程中的包装和编译细节在前一节中已经介绍过，这里我们将详细描述查找文件模块的过程，其中，也有一些细节值得知晓。&lt;br&gt;        //require方法接受以下几种参数的传递:&lt;br&gt;          http、fs、path等，原生模块。&lt;br&gt;            ./mod或../mod，相对路径的文件模块。&lt;br&gt;            /pathtomodule/mod，绝对路径的文件模块。&lt;br&gt;            mod，非原生模块的文件模块。&lt;/p&gt;
&lt;p&gt;/7、Node.js函数 &lt;em&gt;/&lt;br&gt;    //Node.js中函数的使用与Javascript类似:&lt;br&gt;      function say(word) {&lt;br&gt;        console.log(word);&lt;br&gt;      }&lt;br&gt;      function execute(someFunction, value) {&lt;br&gt;        someFunction(value);&lt;br&gt;      }&lt;br&gt;      execute(say, “Hello”);&lt;br&gt;      // 以上代码中，我们把 say 函数作为execute函数的第一个变量进行了传递。这里返回的不是 say 的返回值，而是 say 本身！ 这样一来， say 就变成了execute 中的本地变量 someFunction ，execute可以通过调用 someFunction() （带括号的形式）来使用 say 函数。 当然，因为 say 有一个变量， execute 在调用 someFunction 时可以传递这样一个变量。&lt;br&gt;    /&lt;/em&gt; 匿名函数 &lt;em&gt;/&lt;br&gt;      //我们可以把一个函数作为变量传递。但是我们不一定要绕这个”先定义，再传递”的圈子，我们可以直接在另一个函数的括号中定义和传递这个函数：&lt;br&gt;      function execute(someFunction, value){&lt;br&gt;        someFunction(value);&lt;br&gt;      }&lt;br&gt;      execute(function(word){console.log(word)}, “Hello”);&lt;br&gt;      // 我们在 execute 接受第一个参数的地方直接定义了我们准备传递给 execute 的函数。 用这种方式，我们甚至不用给这个函数起名字，这也是为什么它被叫做匿名函数 。&lt;br&gt;    /&lt;/em&gt; 函数传递是如何让HTTP服务器工作的 */&lt;br&gt;      var http = require(“http”);&lt;br&gt;      http.createServer(function(request,response){&lt;br&gt;        response.writeHead(200, {“Content-Type”: “text/plain”});&lt;br&gt;        response.write(“Hello World”);&lt;br&gt;        response.end();&lt;br&gt;      }).listen(8888);&lt;/p&gt;
&lt;p&gt;/8、Node.js 路由*/&lt;br&gt;    //我们要为路由提供请求的URL和其他需要的GET及POST参数，随后路由需要根据这些数据来执行相应的代码。因此，我们需要查看HTTP请求，从中提取出请求的URL以及GET/POST参数。我们需要的所有数据都会包含在request对象中，该对象作为onRequest()回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的Node.JS模块，它们分别是url和querystring模块。&lt;br&gt;                       url.parse(string).query&lt;br&gt;                                               |&lt;br&gt;               url.parse(string).pathname      |&lt;br&gt;                           |                   |&lt;br&gt;                           |                   |&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                     ------ -------------------
http://localhost:8888/start?foo=bar&amp;amp;hello=world
                                ---       -----
                                 |          |
                                 |          |
              querystring(string)[&amp;quot;foo&amp;quot;]    |
                                            |
                         querystring(string)[&amp;quot;hello&amp;quot;]
//当然我们也可以用querystring模块来解析POST请求体中的参数，稍后会有演示。
  //现在我们来给onRequest()函数加上一些逻辑，用来找出浏览器请求的URL路径： 
  var http = require(&amp;quot;http&amp;quot;);
  var url = require(&amp;quot;url&amp;quot;);
  function start() {
    function onRequest(request, response) {
      var pathname = url.parse(request.url).pathname;
      console.log(&amp;quot;Request for &amp;quot; + pathname + &amp;quot;received.&amp;quot;);
      response.writeHead(200, {&amp;quot;Content-Type&amp;quot;: &amp;quot;text/plain&amp;quot;});
      response.write(&amp;quot;Hello World&amp;quot;);
      response.end();
    }
    http.createServer(onRequest).listen(8888);
    console.log(&amp;quot;Server has started.&amp;quot;);
  }
  exports.start = start;
  //现在我们可以来编写路由了，建立一个名为router.js的文件:
  function route(pathname){
    console.log(&amp;quot;About to route a request for &amp;quot; + pathname);
  }
  exports.route = route;
  //在添加更多的逻辑以前，我们先来看看如何把路由和服务器整合起来(我们将使用依赖注入的方式较松散地添加路由模块)。首先，我们来扩展一下服务器的start()函数，以便将路由函数作为参数传递过去：
  var http = require(&amp;quot;http&amp;quot;);
  var url = require(&amp;quot;url&amp;quot;);
  function start() {
    function onRequest(request, response) {
      var pathname = url.parse(request.url).pathname;
      console.log(&amp;quot;Request for &amp;quot; + pathname + &amp;quot;received.&amp;quot;);
      route(pathname);//路由函数
      response.writeHead(200, {&amp;quot;Content-Type&amp;quot;: &amp;quot;text/plain&amp;quot;});
      response.write(&amp;quot;Hello World&amp;quot;);
      response.end();
    }
    http.createServer(onRequest).listen(8888);
    console.log(&amp;quot;Server has started.&amp;quot;);
  }
  exports.start = start;
  //同时，我们会相应扩展index.js，使得路由函数可以被注入到服务器中：
  var server = require(&amp;quot;./server&amp;quot;);
  var router = require(&amp;quot;./router&amp;quot;);
  server.start(router.route);
  //现在启动应用（node index.js），随后请求一个URL，你将会看到应用输出相应的信息，这表明我们的HTTP服务器已经在使用路由模块了，并会将请求的路径传递给路由：
  node index.js
  Request for /foo received.
  About to route a request for /foo
  //以上输出已经去掉了比较烦人的/favicon.ico请求相关的部分。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;/9、Node.js 全局对象&lt;em&gt;/&lt;br&gt;    // 在浏览器 JavaScript 中，通常 window 是全局对象， 而 Node.js 中的全局对象是 global，所有全局变量（除了 global 本身以外）都是 global 对象的属性。 在 Node.js 我们可以直接访问到 global 的属性，而不需要在应用中包含它。&lt;br&gt;    /&lt;/em&gt;全局对象与全局变量&lt;em&gt;/&lt;br&gt;      //global 全局对象最根本的作用是作为全局变量的宿主。按照 ECMAScript 的定义，满足以下条 件的变量是全局变量：&lt;br&gt;        /&lt;/em&gt;在最外层定义的变量；&lt;br&gt;          全局对象的属性；&lt;br&gt;          隐式定义的变量（未定义直接赋值的变量）。&lt;em&gt;/&lt;br&gt;      //当你定义一个全局变量时，这个变量同时也会成为全局对象的属性，反之亦然。需要注 意的是，在 Node.js 中你不可能在最外层定义变量，因为所有用户代码都是属于当前模块的， 而模块本身不是最外层上下文。注意： 永远使用 var 定义变量以避免引入全局变量，因为全局变量会污染 命名空间，提高代码的耦合风险。&lt;br&gt;    __filename &lt;/em&gt;/&lt;br&gt;      //&lt;strong&gt;filename 表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。 如果在模块中，返回的值是模块文件的路径。&lt;br&gt;      //实例：创建main.js：&lt;br&gt;        // 输出全局变量 &lt;/strong&gt;filename 的值&lt;br&gt;        console.log( &lt;strong&gt;filename );&lt;br&gt;      //执行 main.js 文件:&lt;br&gt;        node main.js&lt;br&gt;        /web/com/runoob/nodejs/main.js
    &lt;/strong&gt;dirname &lt;em&gt;/&lt;br&gt;      //&lt;strong&gt;dirname 表示当前执行脚本所在的目录。&lt;br&gt;      //实例：创建main.js：&lt;br&gt;        // 输出全局变量 &lt;/strong&gt;dirname 的值&lt;br&gt;        console.log( __dirname );&lt;br&gt;      //执行 main.js 文件:&lt;br&gt;        node main.js&lt;br&gt;        /web/com/runoob/nodejs&lt;br&gt;    setTimeout(cb, ms) &lt;/em&gt;/&lt;br&gt;      //setTimeout(cb, ms) 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。：setTimeout() 只执行一次指定函数。返回一个代表定时器的句柄值。&lt;br&gt;      //实例:创建文件 main.js:&lt;br&gt;        function printHello(){&lt;br&gt;          console.log(“Hello, World!”);&lt;br&gt;        }&lt;br&gt;        //两秒后执行以上函数&lt;br&gt;        setTimeout(printHello, 2000);&lt;br&gt;      //执行 main.js 文件:&lt;br&gt;        node main.js&lt;br&gt;        Hello, World!&lt;br&gt;    clearTimeout(t) */&lt;br&gt;      //clearTimeout(t) 全局函数用于停止一个之前通过 setTimeout() 创建的定时器。 参数 t 是通过 setTimeout() 函数创建的计算器。&lt;br&gt;      //实例:创建文件 main.js:&lt;br&gt;        function printHello(){&lt;br&gt;          console.log(“Hello, World!”);&lt;br&gt;        }&lt;br&gt;        //两秒后执行以上函数&lt;br&gt;        var t = setTimeout(printHello, 2000);&lt;br&gt;        //清除定时器&lt;br&gt;        clearTimeout(t)&lt;br&gt;      //执行 main.js 文件:&lt;br&gt;        node main.js&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setInterval(cb, ms), clearInterval(t) */
  //setInterval(cb, ms) 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。返回一个代表定时器的句柄值。可以使用 clearInterval(t) 函数来清除定时器。setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。
  //实例:创建文件 main.js:
    function printHello(){
      console.log(&amp;quot;Hello, World!&amp;quot;);
    }
    //两秒后执行以上函数
    setInterval(printHello, 2000);
  //执行 main.js 文件:
    node main.js
    Hello, World! Hello, World! Hello, World ……
    //以上程序每隔两秒就会输出一次&amp;quot;Hello, World!&amp;quot;，且会永久执行下去，直到你按下 ctrl + c 按钮.
console */
  // console 用于提供控制台标准输出，它是由 Internet Explorer 的 JScript 引擎提供的调试工具，后来逐渐成为浏览器的事实标准。Node.js 沿用了这个标准，提供与习惯行为一致的 console 对象，用于向标准输出流（stdout）或标准错误流（stderr）输出字符。
  //console方法：
    console.log([data], [...])//向标准输出流打印字符并以换行符结束。该方法接收若干 个参数，如果只有一个参数，则输出这个参数的字符串形式。如果有多个参数，则 以类似于C 语言 printf() 命令的格式输出。
    console.info([data], [...])//P该命令的作用是返回信息性消息，这个命令与console.log差别并不大，除了在chrome中只会输出文字外，其余的会显示一个蓝色的惊叹号。
    console.error([data], [...])//输出错误消息的。控制台在出现错误时会显示是红色的叉子。
    console.warn([data], [...])//输出警告消息。控制台出现有黄色的惊叹号。
    console.dir(obj, [options])//用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。
    console.time(label)//输出时间，表示计时开始。
    console.timeEnd(label)//结束时间，表示计时结束。
    console.trace(message, [...])//当前执行的代码在堆栈中的调用路径，这个测试函数运行很有帮助，只要给想测试的函数里面加入 console.trace 就行了。
    console.assert(value, [message], [...])//用于判断某个表达式或变量是否为真，接手两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。
process */
  //process 是一个全局变量，即 global 对象的属性。它用于描述当前Node.js 进程状态的对象，提供了一个与操作系统的简单接口。通常在你写本地命令行程序的时候，少不了要 和它打交道。下面将会介绍 process 对象的一些最常用的成员方法:
    exit//当进程准备退出时触发。
    beforeExit//当 node 清空事件循环，并且没有其他安排时触发这个事件。通常来说，当没有进程安排时 node 退出，但是 &amp;apos;beforeExit&amp;apos; 的监听器可以异步调用，这样 node 就会继续执行。
    uncaughtException//当一个异常冒泡回到事件循环，触发这个事件。如果给异常添加了监视器，默认的操作（打印堆栈跟踪信息并退出）就不会发生。
    Signal 事件//当进程接收到信号时就触发。信号列表详见标准的 POSIX 信号名，如 SIGINT、SIGUSR1 等。
  /*退出状态码：1,2,3,4,5,6,7,8,9,10,12,&amp;gt;128*/
  //Process属性：
    stdout//标准输出流。
    stderr//标准错误流
    stdin//标准输入流。
    argv//argv 属性返回一个数组，由命令行执行脚本时的各个参数组成。它的第一个成员总是node，第二个成员是脚本文件名，其余成员是脚本文件的参数。
    execPath//返回执行当前脚本的 Node 二进制文件的绝对路径。
    execArgv//返回一个数组，成员是命令行下执行脚本时，在Node可执行文件与脚本文件之间的命令行参数。
    env//返回一个对象，成员为当前 shell 的环境变量
    exitCode//进程退出时的代码，如果进程优通过 process.exit() 退出，不需要指定退出码。
    version//Node 的版本，比如v0.10.18。
    versions//一个属性，包含了 node 的版本和依赖.
    config//一个包含用来编译当前 node 执行文件的 javascript 配置选项的对象。它与运行 ./configure 脚本生成的 &amp;quot;config.gypi&amp;quot; 文件相同。
    pid//当前进程的进程号。
    title//进程名，默认值为&amp;quot;node&amp;quot;，可以自定义该值。
    arch//当前 CPU 的架构：&amp;apos;arm&amp;apos;、&amp;apos;ia32&amp;apos; 或者 &amp;apos;x64&amp;apos;。
    platform//运行程序所在的平台系统 &amp;apos;darwin&amp;apos;, &amp;apos;freebsd&amp;apos;, &amp;apos;linux&amp;apos;, &amp;apos;sunos&amp;apos; 或 &amp;apos;win32&amp;apos;
    mainModule//require.main 的备选方法。不同点，如果主模块在运行时改变，require.main可能会继续返回老的模块。可以认为，这两者引用了同一个模块。
  //方法参考手册:
    abort()//这将导致 node 触发 abort 事件。会让 node 退出并生成一个核心文件。
    chdir(directory)//改变当前工作进程的目录，如果操作失败抛出异常。
    cwd()//返回当前进程的工作目录
    exit([code])//使用指定的 code 结束进程。如果忽略，将会使用 code 0。
    getgid()//获取进程的群组标识（参见 getgid(2)）。获取到得时群组的数字 id，而不是名字。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
    setgid(id)//设置进程的群组标识（参见 setgid(2)）。可以接收数字 ID 或者群组名。如果指定了群组名，会阻塞等待解析为数字 ID 。//注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
    getuid()//获取进程的用户标识(参见 getuid(2))。这是数字的用户 id，不是用户名。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
    setuid(id)  //设置进程的用户标识（参见setuid(2)）。接收数字 ID或字符串名字。果指定了群组名，会阻塞等待解析为数字 ID 。//注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
    getgroups()//返回进程的群组 iD 数组。POSIX 系统没有保证一定有，但是 node.js 保证有。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。//
    setgroups(groups)//设置进程的群组 ID。这是授权操作，所有你需要有 root 权限，或者有 CAP_SETGID 能力。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
    initgroups(user, extra_group)//读取 /etc/group ，并初始化群组访问列表，使用成员所在的所有群组。这是授权操作，所有你需要有 root 权限，或者有 CAP_SETGID 能力。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
    kill(pid, [signal])//发送信号给进程. pid 是进程id，并且 signal 是发送的信号的字符串描述。信号名是字符串，比如 &amp;apos;SIGINT&amp;apos; 或 &amp;apos;SIGHUP&amp;apos;。如果忽略，信号会是 &amp;apos;SIGTERM&amp;apos;。
    memoryUsage()//返回一个对象，描述了 Node 进程所用的内存状况，单位为字节。
    nextTick(callback)//一旦当前事件循环结束，调用回到函数。
    umask([mask])//设置或读取进程文件的掩码。子进程从父进程继承掩码。如果mask 参数有效，返回旧的掩码。否则，返回当前掩码。
    uptime()//返回 Node 已经运行的秒数。
    hrtime()//返回当前进程的高分辨时间，形式为 [seconds, nanoseconds]数组。它是相对于过去的任意事件。该值与日期无关，因此不受时钟漂移的影响。主要用途是可以通过精确的时间间隔，来衡量程序的性能。你可以将之前的结果传递给当前的 process.hrtime() ，会返回两者间的时间差，用来基准和测量时间间隔。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;/10、Node.js 常用工具 &lt;em&gt;/&lt;br&gt;    //util 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。&lt;br&gt;    /&lt;/em&gt;util.inherits&lt;em&gt;/&lt;br&gt;      util.inherits(constructor, superConstructor)//是一个实现对象间原型继承 的函数。JavaScript 的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript 没有 提供对象继承的语言级别特性，而是通过原型复制来实现的。&lt;br&gt;      //在这里我们只介绍util.inherits 的用法，示例如下：&lt;br&gt;        var util = require(‘util’);&lt;br&gt;        function Base() {&lt;br&gt;          this.name = ‘base’;&lt;br&gt;          this.base = 1991;&lt;br&gt;          this.sayHello = function() {&lt;br&gt;            console.log(‘Hello ‘ + this.name);&lt;br&gt;          };&lt;br&gt;        }&lt;br&gt;        Base.prototype.showName = function(){&lt;br&gt;          console.log(this.name);&lt;br&gt;        };&lt;br&gt;        function Sub() {&lt;br&gt;          this.name = ‘sub’;&lt;br&gt;        }&lt;br&gt;        util.inherits(Sub, Base);&lt;br&gt;        var objBase = new Base();&lt;br&gt;        objBase.showName();&lt;br&gt;        objBase.sayHello();&lt;br&gt;        console.log(objBase);&lt;br&gt;        var objSub = new Sub();&lt;br&gt;        objSub.showName();&lt;br&gt;        console.log(objSub);&lt;br&gt;       //我们定义了一个基础对象Base 和一个继承自Base 的Sub，Base 有三个在构造函数 内定义的属性和一个原型中定义的函数，通过util.inherits 实现继承。运行结果如下：&lt;br&gt;        base&lt;br&gt;        Hello base&lt;br&gt;        { name: ‘base’, base: 1991, sayHello: [Function] }&lt;br&gt;        sub&lt;br&gt;        { name: ‘sub’ }&lt;br&gt;        //注意：Sub 仅仅继承了Base 在原型中定义的函数，而构造函数内部创造的 base 属 性和 sayHello 函数都没有被 Sub 继承。同时，在原型中定义的属性不会被console.log 作 为对象的属性输出.&lt;br&gt;    /&lt;/em&gt;util.inspect*/&lt;br&gt;       util.inspect(object,[showHidden],[depth],[colors])//是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。它至少接受一个参数 object，即要转换的对象。&lt;br&gt;        showHidden//是一个可选参数，如果值为 true，将会输出更多隐藏信息。&lt;br&gt;        depth//表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多 少。如果不指定depth，默认会递归2层，指定为 null 表示将不限递归层数完整遍历对象。&lt;br&gt;        colors//如果color 值为 true，输出格式将会以ANSI 颜色编码，通常用于在终端显示更漂亮 的效果。&lt;br&gt;        //特别要指出的是，util.inspect 并不会简单地直接把对象转换为字符串，即使该对 象定义了toString 方法也不会调用。&lt;br&gt;        var util = require(‘util’);&lt;br&gt;        function Person(){&lt;br&gt;          this.name = ‘byvoid’;&lt;br&gt;          this.toString = function(){&lt;br&gt;            return this.name;&lt;br&gt;          };&lt;br&gt;        }&lt;br&gt;        var obj = new Person();&lt;br&gt;        console.log(util.inspect(obj));&lt;br&gt;        console.log(util.inspect(obj,true));&lt;br&gt;        //运行结果是：&lt;br&gt;        Person { name: ‘byvoid’, toString: [Function] }&lt;br&gt;        Person {&lt;br&gt;          name: ‘byvoid’,&lt;br&gt;          toString:&lt;br&gt;           { [Function]&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       [length]: 0,
       [name]: &amp;apos;&amp;apos;,
       [arguments]: null,
       [caller]: null,
       [prototype]: { [constructor]: [Circular] } 
    } }
util.isArray(object)//如果给定的参数 &amp;quot;object&amp;quot; 是一个数组返回true，否则返回false。
  var util = require(&amp;apos;util&amp;apos;);
  util.isArray([]);// true
  util.isArray(new Array);// true
  util.isArray({});// false
util.isRegExp(object)//如果给定的参数 &amp;quot;object&amp;quot; 是一个正则表达式返回true，否则返回false。
  var util = require(&amp;apos;util&amp;apos;);
  util.isRegExp(/some regexp/);// true
  util.isRegExp(new RegExp(&amp;apos;another regexp&amp;apos;));// true
  util.isRegExp({});// false
util.isDate(object)// 如果给定的参数 &amp;quot;object&amp;quot; 是一个日期返回true，否则返回false。
  var util = require(&amp;apos;util&amp;apos;);
  util.isDate(new Date());// true
  util.isDate(Date());// false (without &amp;apos;new&amp;apos; returns a String)
  util.isDate({});// false
util.isError(object)// 如果给定的参数 &amp;quot;object&amp;quot; 是一个错误对象返回true，否则返回false。
  var util = require(&amp;apos;util&amp;apos;);
  util.isError(new Error());// true
  util.isError(new TypeError());// true
  util.isError({ name: &amp;apos;Error&amp;apos;, message: &amp;apos;an error occurred&amp;apos; });// false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;/11、Node.js 文件系统&lt;em&gt;/&lt;br&gt;    //Node.js 提供一组类似 UNIX（POSIX）标准的文件操作API。 Node 导入文件系统模块(fs)语法如下所示：&lt;br&gt;      var fs = require(“fs”);&lt;br&gt;    //读取文件内容&lt;br&gt;    fs.readFile(filename, [options], callback)//异步读取文件内容。&lt;br&gt;    fs.readFileSync(filename, [options])//同步读取文件内容。&lt;br&gt;    /&lt;/em&gt;建议大家是用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。&lt;em&gt;/&lt;br&gt;    //打开文件&lt;br&gt;    fs.open(path, flags, [mode], callback)//异步打开文件。&lt;br&gt;      //path-文件路径；flag-文件打开行为；mode-设置文件模式(默认:0666-可读可写)；callback - 回调函数，带有两个参数如：callback(err, fd)。&lt;br&gt;      //flags参数描述：&lt;br&gt;        r //以读取模式打开文件。如果文件不存在抛出异常。&lt;br&gt;        r+  //以读写模式打开文件。如果文件不存在抛出异常。&lt;br&gt;        rs  //以同步的方式读取文件。&lt;br&gt;        rs+ //以同步的方式读取和写入文件。&lt;br&gt;        w //以写入模式打开文件，如果文件不存在则创建。&lt;br&gt;        wx  //类似 ‘w’，但是如果文件路径存在，则文件写入失败。&lt;br&gt;        w+  //以读写模式打开文件，如果文件不存在则创建。&lt;br&gt;        wx+ //类似 ‘w+’， 但是如果文件路径存在，则文件读写失败。&lt;br&gt;        a //以追加模式打开文件，如果文件不存在则创建。&lt;br&gt;        ax  //类似 ‘a’， 但是如果文件路径存在，则文件追加失败。&lt;br&gt;        a+  //以读取追加模式打开文件，如果文件不存在则创建。&lt;br&gt;        ax+ //类似 ‘a+’， 但是如果文件路径存在，则文件读取追加失败。&lt;br&gt;    //读取文件信息&lt;br&gt;    fs.stat(path, callback)//通过异步模式获取文件信息.&lt;br&gt;      //path - 文件路径。callback - 回调函数，带有两个参数如：(err, stats), stats 是 fs.Stats 对象。&lt;br&gt;      //fs.stat(path)执行后，会将stats类的实例返回给其回调函数。可以通过stats类中的提供方法判断文件的相关属性。stats类中方法有：&lt;br&gt;        stats.isFile()//如果是文件返回 true，否则返回 false。&lt;br&gt;        stats.isDirectory()//如果是目录返回 true，否则返回 false。&lt;br&gt;        stats.isBlockDevice()//如果是块设备返回 true，否则返回 false。&lt;br&gt;        stats.isCharacterDevice()//如果是字符设备返回 true，否则返回 false。&lt;br&gt;        stats.isSymbolicLink()//如果是软链接返回 true，否则返回 false。&lt;br&gt;        stats.isFIFO()//如果是FIFO，返回true，否则返回 false。FIFO是UNIX中的一种特殊类型的命令管道。&lt;br&gt;        stats.isSocket()//如果是 Socket 返回 true，否则返回 false。&lt;br&gt;    //写入文件&lt;br&gt;    fs.writeFile(filename, data, [options], callback)//异步写入文件&lt;br&gt;      //path-文件路径；data-要写入的数据，可以是String或Buffer(流)对象；options-该参数是一个对象，包含{encoding,mode,flag}默认utf8 ,0666,’w’；callback-回调函数，只包含错误信息参数(err),在写入失败是返回。&lt;br&gt;    //读取文件&lt;br&gt;    fs.read(fd, buffer, offset, length, position, callback)//异步模式下使用文件描述符来读取文件。&lt;br&gt;      //fd-通过fs.open()方法返回文件描述符；buffer-数据写入的缓冲区；offset-缓冲区写入的写入偏移量；length-要从文件中读取的字节数；position-文件读取的起始位置，值为null则会从当前文件指针位置读取；callback-回调函数，有三个参数err错误信息,bytesRead字节数,buffer缓冲区对象.&lt;br&gt;    //关闭文件&lt;br&gt;    fs.close(fd, callback)//异步模式下关闭文件,该方法使用了文件描述符来读取文件。&lt;br&gt;      //fd - 通过 fs.open() 方法返回的文件描述符; callback - 回调函数，没有参数。&lt;br&gt;    //截取文件&lt;br&gt;    fs.ftruncate(fd, len, callback)//异步模式下截取文件,该方法使用了文件描述符来读取文件。&lt;br&gt;      //fd - 通过 fs.open() 方法返回的文件描述符; len - 文件内容截取的长度; callback - 回调函数，没有参数。&lt;br&gt;    //删除文件&lt;br&gt;    fs.unlink(path, callback)&lt;br&gt;      //path - 文件路径; callback - 回调函数，没有参数。&lt;br&gt;    //创建目录&lt;br&gt;    fs.mkdir(path[, mode], callback)&lt;br&gt;      //path - 文件路径; mode - 设置目录权限，默认为 0777; callback - 回调函数，没有参数。&lt;br&gt;    //读取目录&lt;br&gt;    fs.readdir(path, callback)&lt;br&gt;      //path - 文件路径; callback - 回调函数，回调函数带有两个参数err, files，err 为错误信息，files 为 目录下的文件数组列表。&lt;br&gt;    /文件模块方法参考手册&lt;/em&gt;/&lt;br&gt;      1 fs.rename(oldPath, newPath, callback)//异步 rename().回调函数没有参数，但可能抛出异常。&lt;br&gt;      2 fs.ftruncate(fd, len, callback)//异步 ftruncate().回调函数没有参数，但可能抛出异常。&lt;br&gt;      3 fs.ftruncateSync(fd, len)//同步 ftruncate()&lt;br&gt;      4 fs.truncate(path, len, callback)//异步 truncate().回调函数没有参数，但可能抛出异常。&lt;br&gt;      5 fs.truncateSync(path, len)//同步 truncate()&lt;br&gt;      6 fs.chown(path, uid, gid, callback)//异步 chown().回调函数没有参数，但可能抛出异常。&lt;br&gt;      7 fs.chownSync(path, uid, gid)//同步 chown()&lt;br&gt;      8 fs.fchown(fd, uid, gid, callback)//异步 fchown().回调函数没有参数，但可能抛出异常。&lt;br&gt;      9 fs.fchownSync(fd, uid, gid)//同步 fchown()&lt;br&gt;      10  fs.lchown(path, uid, gid, callback)//异步 lchown().回调函数没有参数，但可能抛出异常。&lt;br&gt;      11  fs.lchownSync(path, uid, gid)//同步 lchown()&lt;br&gt;      12  fs.chmod(path, mode, callback)//异步 chmod().回调函数没有参数，但可能抛出异常。&lt;br&gt;      13  fs.chmodSync(path, mode)//同步 chmod().&lt;br&gt;      14  fs.fchmod(fd, mode, callback)//异步 fchmod().回调函数没有参数，但可能抛出异常。&lt;br&gt;      15  fs.fchmodSync(fd, mode)//同步 fchmod().&lt;br&gt;      16  fs.lchmod(path, mode, callback)//异步 lchmod().回调函数没有参数，但可能抛出异常。Only available on Mac OS X.&lt;br&gt;      17  fs.lchmodSync(path, mode)//同步 lchmod().&lt;br&gt;      18  fs.stat(path, callback)//异步 stat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。&lt;br&gt;      19  fs.lstat(path, callback)//异步 lstat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。&lt;br&gt;      20  fs.fstat(fd, callback)//异步 fstat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。&lt;br&gt;      21  fs.statSync(path)//同步 stat(). 返回 fs.Stats 的实例。&lt;br&gt;      22  fs.lstatSync(path)//同步 lstat(). 返回 fs.Stats 的实例。&lt;br&gt;      23  fs.fstatSync(fd)//同步 fstat(). 返回 fs.Stats 的实例。&lt;br&gt;      24  fs.link(srcpath, dstpath, callback)//异步 link().回调函数没有参数，但可能抛出异常。&lt;br&gt;      25  fs.linkSync(srcpath, dstpath)//同步 link().&lt;br&gt;      26  fs.symlink(srcpath, dstpath[, type], callback)//异步 symlink().回调函数没有参数，但可能抛出异常。 type 参数可以设置为 ‘dir’, ‘file’, 或 ‘junction’ (默认为 ‘file’) 。&lt;br&gt;      27  fs.symlinkSync(srcpath, dstpath[, type])//同步 symlink().&lt;br&gt;      28  fs.readlink(path, callback)//异步 readlink(). 回调函数有两个参数 err, linkString。&lt;br&gt;      29  fs.realpath(path[, cache], callback)//异步 realpath(). 回调函数有两个参数 err, resolvedPath。&lt;br&gt;      30  fs.realpathSync(path[, cache])//同步 realpath()。返回绝对路径。&lt;br&gt;      31  fs.unlink(path, callback)//异步 unlink().回调函数没有参数，但可能抛出异常。&lt;br&gt;      32  fs.unlinkSync(path)//同步 unlink().&lt;br&gt;      33  fs.rmdir(path, callback)//异步 rmdir().回调函数没有参数，但可能抛出异常。&lt;br&gt;      34  fs.rmdirSync(path)//同步 rmdir().&lt;br&gt;      35  fs.mkdir(path[, mode], callback)//S异步 mkdir(2).回调函数没有参数，但可能抛出异常。 mode defaults to 0777.&lt;br&gt;      36  fs.mkdirSync(path[, mode])//同步 mkdir().&lt;br&gt;      37  fs.readdir(path, callback)//异步 readdir(3). 读取目录的内容。&lt;br&gt;      38  fs.readdirSync(path)//同步 readdir().返回文件数组列表。&lt;br&gt;      39  fs.close(fd, callback)//异步 close().回调函数没有参数，但可能抛出异常。&lt;br&gt;      40  fs.closeSync(fd)//同步 close().&lt;br&gt;      41  fs.open(path, flags[, mode], callback)//异步打开文件。&lt;br&gt;      42  fs.openSync(path, flags[, mode])//同步 version of fs.open().&lt;br&gt;      43  fs.utimes(path, atime, mtime, callback)&lt;br&gt;      44  fs.utimesSync(path, atime, mtime)//修改文件时间戳，文件通过指定的文件路径。&lt;br&gt;      45  fs.futimes(fd, atime, mtime, callback)&lt;br&gt;      46  fs.futimesSync(fd, atime, mtime)//修改文件时间戳，通过文件描述符指定。&lt;br&gt;      47  fs.fsync(fd, callback)//异步 fsync.回调函数没有参数，但可能抛出异常。&lt;br&gt;      48  fs.fsyncSync(fd)//同步 fsync.&lt;br&gt;      49  fs.write(fd, buffer, offset, length[, position], callback)//将缓冲区内容写入到通过文件描述符指定的文件。&lt;br&gt;      50  fs.write(fd, data[, position[, encoding]], callback)//通过文件描述符 fd 写入文件内容。&lt;br&gt;      51  fs.writeSync(fd, buffer, offset, length[, position])//同步版的 fs.write()。&lt;br&gt;      52  fs.writeSync(fd, data[, position[, encoding]])//同步版的 fs.write().&lt;br&gt;      53  fs.read(fd, buffer, offset, length, position, callback)//通过文件描述符 fd 读取文件内容。&lt;br&gt;      54  fs.readSync(fd, buffer, offset, length, position)//同步版的 fs.read.&lt;br&gt;      55  fs.readFile(filename[, options], callback)//异步读取文件内容。&lt;br&gt;      56  fs.readFileSync(filename[, options])&lt;br&gt;      57  fs.writeFile(filename, data[, options], callback)&lt;br&gt;      异步写入文件内容。&lt;br&gt;      58  fs.writeFileSync(filename, data[, options])//同步版的 fs.writeFile。&lt;br&gt;      59  fs.appendFile(filename, data[, options], callback)//异步追加文件内容。&lt;br&gt;      60  fs.appendFileSync(filename, data[, options])//The 同步 version of fs.appendFile.&lt;br&gt;      61  fs.watchFile(filename[, options], listener)//查看文件的修改。&lt;br&gt;      62  fs.unwatchFile(filename[, listener])//停止查看 filename 的修改。&lt;br&gt;      63  fs.watch(filename[, options][, listener])//查看 filename 的修改，filename 可以是文件或目录。返回 fs.FSWatcher 对象。&lt;br&gt;      64  fs.exists(path, callback)//检测给定的路径是否存在。&lt;br&gt;      65  fs.existsSync(path)//同步版的 fs.exists.&lt;br&gt;      66  fs.access(path[, mode], callback)//测试指定路径用户权限。&lt;br&gt;      67  fs.accessSync(path[, mode])//同步版的 fs.access。&lt;br&gt;      68  fs.createReadStream(path[, options])//返回ReadStream 对象。&lt;br&gt;      69  fs.createWriteStream(path[, options])//返回 WriteStream 对象。&lt;br&gt;      70  fs.symlink(srcpath, dstpath[, type], callback)//异步 symlink().回调函数没有参数，但可能抛出异常。&lt;/p&gt;
&lt;p&gt;/12、Node.js GET/POST请求 &lt;em&gt;/&lt;br&gt;    /&lt;/em&gt;获取GET请求内容&lt;em&gt;/&lt;br&gt;      // 由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。node.js中url模块中的parse函数提供了这个功能。&lt;br&gt;      var http = require(‘http’);&lt;br&gt;      var url = require(‘url’);&lt;br&gt;      var util = require(‘util’);&lt;br&gt;      http.createServer(function(req, res){&lt;br&gt;        res.writeHead(200, {‘Content-Type’: ‘text/plain’});&lt;br&gt;        res.end(util.inspect(url.parse(req.url, true)));&lt;br&gt;      }).listen(3000);&lt;br&gt;      //在浏览器中访问&lt;a href=&quot;http://localhost:3000/user?name=w3c&amp;amp;email=w3c@w3cschool.cc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:3000/user?name=w3c&amp;amp;email=w3c@w3cschool.cc&lt;/a&gt; 然后查看返回结果:&lt;br&gt;        Url {&lt;br&gt;          protocol: null,&lt;br&gt;          slashes: null,&lt;br&gt;          auth: null,&lt;br&gt;          host: null,&lt;br&gt;          port: null,&lt;br&gt;          hostname: null,&lt;br&gt;          hash: null,&lt;br&gt;          search: ‘?name=w3c&amp;amp;email=w3c@w3cschool.cc’,&lt;br&gt;          query: { name: ‘w3c’, email: ‘w3c@w3cschool.cc’ },&lt;br&gt;          pathname: ‘/user’,&lt;br&gt;          path: ‘/user?name=w3c&amp;amp;email=w3c@w3cschool.cc’,&lt;br&gt;          href: ‘/user?name=w3c&amp;amp;email=w3c@w3cschool.cc’ }&lt;br&gt;    /&lt;/em&gt;获取POST请求内容*/&lt;br&gt;      //POST请求的内容全部的都在请求体中，http.ServerRequest并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时的工作。比如上传文件，而很多时候我们可能并不需要理会请求体的内容，恶意的POST请求会大大消耗服务器的资源，所有node.js默认是不会解析请求体的， 当你需要的时候，需要手动来做。&lt;br&gt;      var http = require(‘http’);&lt;br&gt;      var querystring = require(‘querystring’);&lt;br&gt;      var util = require(‘util’);&lt;br&gt;      http.createServer(function(req, res){&lt;br&gt;        var post = ‘’;//定义了一个post变量，用于暂存请求体的信息&lt;br&gt;        req.on(‘data’,function(chunk){//通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中&lt;br&gt;          post += chunk;&lt;br&gt;        });&lt;br&gt;        req.on(‘end’,function(){//在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。&lt;br&gt;          post = querystring.parse(post);&lt;br&gt;          res.end(util.inspect(post));&lt;br&gt;        });&lt;br&gt;      }).listen(3000);&lt;/p&gt;
&lt;p&gt;/13、Node.js 工具模块 &lt;em&gt;/&lt;br&gt;    /&lt;/em&gt;Node.js OS 模块&lt;em&gt;/&lt;br&gt;      //Node.js os 模块提供了一些基本的系统操作函数。我们可以通过以下方式引入该模块：&lt;br&gt;      var os = require(“os”);&lt;br&gt;      //方法：&lt;br&gt;        1 os.tmpdir()//返回操作系统的默认临时文件夹。&lt;br&gt;        2 os.endianness()//返回 CPU 的字节序，可能的是 “BE” 或 “LE”。&lt;br&gt;        3 os.hostname()//返回操作系统的主机名。&lt;br&gt;        4 os.type()//返回操作系统名&lt;br&gt;        5 os.platform()//返回操作系统名&lt;br&gt;        6 os.arch()//返回操作系统 CPU 架构，可能的值有 “x64”、”arm” 和 “ia32”。&lt;br&gt;        7 os.release()//返回操作系统的发行版本。&lt;br&gt;        8 os.uptime()//返回操作系统运行的时间，以秒为单位。&lt;br&gt;        9 os.loadavg()//返回一个包含 1、5、15 分钟平均负载的数组。&lt;br&gt;        10  os.totalmem()//返回系统内存总量，单位为字节。&lt;br&gt;        11  os.freemem()//返回操作系统空闲内存量，单位是字节。&lt;br&gt;        12  os.cpus()//返回一个对象数组，包含所安装的每个 CPU/内核的信息：型号、速度（单位 MHz）、时间（一个包含 user、nice、sys、idle 和 irq 所使用 CPU/内核毫秒数的对象）。&lt;br&gt;        13  os.networkInterfaces()//获得网络接口列表。&lt;br&gt;      //属性：&lt;br&gt;        os.EOL//定义了操作系统的行尾符的常量。&lt;br&gt;      //实例&lt;br&gt;        //创建 main.js 文件，代码如下所示：&lt;br&gt;          var os = require(“os”);&lt;br&gt;          console.log(‘endianness : ‘ + os.endianness());// CPU 的字节序&lt;br&gt;          console.log(‘type : ‘ + os.type());// 操作系统名&lt;br&gt;          console.log(‘platform : ‘ + os.platform());// 操作系统名&lt;br&gt;          console.log(‘total memory : ‘ + os.totalmem() + “ bytes.”);// 系统内存总量&lt;br&gt;          console.log(‘free memory : ‘ + os.freemem() + “ bytes.”);// 操作系统空闲内存量&lt;br&gt;        //代码执行结果如下：&lt;br&gt;          node main.js&lt;br&gt;          endianness : LE&lt;br&gt;          type : Linux&lt;br&gt;          platform : linux&lt;br&gt;          total memory : 25103400960 bytes.&lt;br&gt;          free memory : 20676710400 bytes.&lt;br&gt;    /&lt;/em&gt;Node.js Path 模块&lt;em&gt;/&lt;br&gt;      //Node.js path 模块提供了一些用于处理文件路径的小工具，我们可以通过以下方式引入该模块：&lt;br&gt;      var path = require(“path”);&lt;br&gt;      //方法&lt;br&gt;        1 path.normalize(p)//规范化路径，注意’..’ 和 ‘.’。&lt;br&gt;        2 path.join([path1][, path2][, …])//用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是”/“，Windows系统是”\”。&lt;br&gt;        3 path.resolve([from …], to)//将 to 参数解析为绝对路径。&lt;br&gt;        4 path.isAbsolute(path)//判断参数 path 是否是绝对路径。&lt;br&gt;        5 path.relative(from, to)//用于将相对路径转为绝对路径。&lt;br&gt;        6 path.dirname(p)//返回路径中代表文件夹的部分，同 Unix 的dirname 命令类似。&lt;br&gt;        7 path.basename(p[, ext])//返回路径中的最后一部分。同 Unix 命令 bashname 类似。&lt;br&gt;        8 path.extname(p)//返回路径中文件的后缀名，即路径中最后一个’.’之后的部分。如果一个路径中并不包含’.’或该路径只包含一个’.’ 且这个’.’为路径的第一个字符，则此命令返回空字符串。&lt;br&gt;        9 path.parse(pathString)//返回路径字符串的对象。&lt;br&gt;        10  path.format(pathObject)//从对象中返回路径字符串，和 path.parse 相反。&lt;br&gt;      //属性&lt;br&gt;        1 path.sep//平台的文件路径分隔符，’\‘ 或 ‘/‘。&lt;br&gt;        2 path.delimiter//平台的分隔符, ; or ‘:’.&lt;br&gt;        3 path.posix//提供上述 path 的方法，不过总是以 posix 兼容的方式交互。&lt;br&gt;        4 path.win32//提供上述 path 的方法，不过总是以 win32 兼容的方式交互。&lt;br&gt;      //实例&lt;br&gt;        //创建 main.js 文件，代码如下所示：&lt;br&gt;          var path = require(“path”);&lt;br&gt;          // 格式化路径&lt;br&gt;          console.log(‘normalization : ‘ + path.normalize(‘/test/test1//2slashes/1slash/tab/..’));&lt;br&gt;          // 连接路径&lt;br&gt;          console.log(‘joint path : ‘ + path.join(‘/test’, ‘test1’, ‘2slashes/1slash’, ‘tab’, ‘..’));&lt;br&gt;          // 转换为绝对路径&lt;br&gt;          console.log(‘resolve : ‘ + path.resolve(‘main.js’));&lt;br&gt;          // 路径中文件的后缀名&lt;br&gt;          console.log(‘ext name : ‘ + path.extname(‘main.js’));&lt;br&gt;        //代码执行结果如下：&lt;br&gt;          node main.js&lt;br&gt;          normalization : /test/test1/2slashes/1slash&lt;br&gt;          joint path : /test/test1/2slashes/1slash&lt;br&gt;          resolve : /web/com/1427176256_27423/main.js&lt;br&gt;          ext name : .js&lt;br&gt;    /&lt;/em&gt;Node.js Net 模块&lt;em&gt;/&lt;br&gt;      // Node.js Net 模块提供了一些用于底层的网络通信的小工具，包含了创建服务器/客户端的方法，我们可以通过以下方式引入该模块：&lt;br&gt;      var net = require(“net”)&lt;br&gt;        //方法：&lt;br&gt;          1 net.createServer([options][, connectionListener])//创建一个 TCP 服务器。参数 connectionListener 自动给 ‘connection’ 事件创建监听器。&lt;br&gt;          2 net.connect(options[, connectionListener])//返回一个新的 ‘net.Socket’，并连接到指定的地址和端口。&lt;br&gt;          当 socket 建立的时候，将会触发 ‘connect’ 事件。&lt;br&gt;          3 net.createConnection(options[, connectionListener])//创建一个到端口 port 和 主机 host的 TCP 连接。 host 默认为 ‘localhost’。&lt;br&gt;          4 net.connect(port[, host][, connectListener])//创建一个端口为 port 和主机为 host的 TCP 连接 。host 默认为 ‘localhost’。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件。返回 ‘net.Socket’。&lt;br&gt;          5 net.createConnection(port[, host][, connectListener])//创建一个端口为 port 和主机为 host的 TCP 连接 。host 默认为 ‘localhost’。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件。返回 ‘net.Socket’。&lt;br&gt;          6 net.connect(path[, connectListener])//创建连接到 path 的 unix socket 。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件上。返回 ‘net.Socket’。&lt;br&gt;          7 net.createConnection(path[, connectListener])//创建连接到 path 的 unix socket 。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件。返回 ‘net.Socket’。&lt;br&gt;          8 net.isIP(input)//检测输入的是否为 IP 地址。 IPV4 返回 4， IPV6 返回 6，其他情况返回 0。&lt;br&gt;          9 net.isIPv4(input)//如果输入的地址为 IPV4， 返回 true，否则返回 false。&lt;br&gt;          10  net.isIPv6(input)//如果输入的地址为 IPV6， 返回 true，否则返回 false。&lt;br&gt;      net.Server&lt;br&gt;        //net.Server通常用于创建一个 TCP 或本地服务器。&lt;br&gt;          //net.Server方法：&lt;br&gt;            1 server.listen(port[, host][, backlog][, callback])//监听指定端口 port 和 主机 host ac连接。 默认情况下 host 接受任何 IPv4 地址(INADDR_ANY)的直接连接。端口 port 为 0 时，则会分配一个随机端口。&lt;br&gt;            2 server.listen(path[, callback])//通过指定 path 的连接，启动一个本地 socket 服务器。&lt;br&gt;            3 server.listen(handle[, callback])//通过指定句柄连接。&lt;br&gt;            4 server.listen(options[, callback])//options 的属性：端口 port, 主机 host, 和 backlog, 以及可选参数 callback 函数, 他们在一起调用server.listen(port, [host], [backlog], [callback])。还有，参数 path 可以用来指定 UNIX socket。&lt;br&gt;            5 server.close([callback])//服务器停止接收新的连接，保持现有连接。这是异步函数，当所有连接结束的时候服务器会关闭，并会触发 ‘close’ 事件。&lt;br&gt;            6 server.address()//操作系统返回绑定的地址，协议族名和服务器端口。&lt;br&gt;            7 server.unref()//如果这是事件系统中唯一一个活动的服务器，调用 unref 将允许程序退出。&lt;br&gt;            8 server.ref()//与 unref 相反，如果这是唯一的服务器，在之前被 unref 了的服务器上调用 ref 将不会让程序退出（默认行为）。如果服务器已经被 ref，则再次调用 ref 并不会产生影响。&lt;br&gt;            9 server.getConnections(callback)//异步获取服务器当前活跃连接的数量。当 socket 发送给子进程后才有效；回调函数有 2 个参数 err 和 count。&lt;br&gt;          //net.Server事件：&lt;br&gt;            1 listening//当服务器调用 server.listen 绑定后会触发。&lt;br&gt;            2 connection//当新连接创建后会被触发。socket 是 net.Socket实例。&lt;br&gt;            3 close//服务器关闭时会触发。注意，如果存在连接，这个事件不会被触发直到所有的连接关闭。&lt;br&gt;            4 error//发生错误时触发。’close’ 事件将被下列事件直接调用。&lt;br&gt;      net.Socket&lt;br&gt;        //net.Socket 对象是 TCP 或 UNIX Socket 的抽象。net.Socket 实例实现了一个双工流接口。 他们可以在用户创建客户端(使用 connect())时使用, 或者由 Node 创建它们，并通过 connection 服务器事件传递给用户。&lt;br&gt;          //net.Socket事件：&lt;br&gt;            1 lookup//在解析域名后，但在连接前，触发这个事件。对 UNIX sokcet 不适用。&lt;br&gt;            2 connect//成功建立 socket 连接时触发。&lt;br&gt;            3 data//当接收到数据时触发。&lt;br&gt;            4 end//当 socket 另一端发送 FIN 包时，触发该事件。&lt;br&gt;            5 timeout//当 socket 空闲超时时触发，仅是表明 socket 已经空闲。用户必须手动关闭连接。&lt;br&gt;            6 drain//当写缓存为空得时候触发。可用来控制上传。&lt;br&gt;            7 error//错误发生时触发。&lt;br&gt;            8 close//当 socket 完全关闭时触发。参数 had_error 是布尔值，它表示是否因为传输错误导致 socket 关闭。&lt;br&gt;          //net.Socket属性：&lt;br&gt;            1 socket.bufferSize//该属性显示了要写入缓冲区的字节数。&lt;br&gt;            2 socket.remoteAddress//远程的 IP 地址字符串，例如：’74.125.127.100’ or ‘2001:4860:a005::68’。&lt;br&gt;            3 socket.remoteFamily//远程IP协议族字符串，比如 ‘IPv4’ or ‘IPv6’。&lt;br&gt;            4 socket.remotePort//远程端口，数字表示，例如：80 or 21。&lt;br&gt;            5 socket.localAddress//网络连接绑定的本地接口 远程客户端正在连接的本地 IP 地址，字符串表示。例如，如果你在监听’0.0.0.0’而客户端连接在’192.168.1.1’，这个值就会是 ‘192.168.1.1’。&lt;br&gt;            6 socket.localPort//本地端口地址，数字表示。例如：80 or 21。&lt;br&gt;            7 socket.bytesRead//接收到得字节数。&lt;br&gt;            8 socket.bytesWritten//发送的字节数。&lt;br&gt;          //net.Socket方法：&lt;br&gt;            1 new net.Socket([options])//构造一个新的 socket 对象。&lt;br&gt;            2 socket.connect(port[, host][, connectListener])//指定端口 port 和 主机 host，创建 socket 连接 。参数 host 默认为 localhost。通常情况不需要使用 net.createConnection 打开 socket。只有你实现了自己的 socket 时才会用到。&lt;br&gt;            3 socket.connect(path[, connectListener])//打开指定路径的 unix socket。通常情况不需要使用 net.createConnection 打开 socket。只有你实现了自己的 socket 时才会用到。&lt;br&gt;            4 socket.setEncoding([encoding])//设置编码&lt;br&gt;            5 socket.write(data[, encoding][, callback])//在 socket 上发送数据。第二个参数指定了字符串的编码，默认是 UTF8 编码。&lt;br&gt;            6 socket.end([data][, encoding])//半关闭 socket。例如，它发送一个 FIN 包。可能服务器仍在发送数据。&lt;br&gt;            7 socket.destroy()//确保没有 I/O 活动在这个套接字上。只有在错误发生情况下才需要。（处理错误等等）。&lt;br&gt;            8 socket.pause()//暂停读取数据。就是说，不会再触发 data 事件。对于控制上传非常有用。&lt;br&gt;            9 socket.resume()//调用 pause() 后想恢复读取数据。&lt;br&gt;            10  socket.setTimeout(timeout[, callback])//socket 闲置时间超过 timeout 毫秒后 ，将 socket 设置为超时。&lt;br&gt;            11  socket.setNoDelay([noDelay])//禁用纳格（Nagle）算法。默认情况下 TCP 连接使用纳格算法，在发送前他们会缓冲数据。将 noDelay 设置为 true 将会在调用 socket.write() 时立即发送数据。noDelay 默认值为 true。&lt;br&gt;            12  socket.setKeepAlive([enable][, initialDelay])//禁用/启用长连接功能，并在发送第一个在闲置 socket 上的长连接 probe 之前，可选地设定初始延时。默认为 false。 设定 initialDelay （毫秒），来设定收到的最后一个数据包和第一个长连接probe之间的延时。将 initialDelay 设为0，将会保留默认（或者之前）的值。默认值为0.&lt;br&gt;            13  socket.address()//操作系统返回绑定的地址，协议族名和服务器端口。返回的对象有 3 个属性，比如{ port: 12346, family: ‘IPv4’, address: ‘127.0.0.1’ }。&lt;br&gt;            14  socket.unref()//如果这是事件系统中唯一一个活动的服务器，调用 unref 将允许程序退出。如果服务器已被 unref，则再次调用 unref 并不会产生影响。&lt;br&gt;            15  socket.ref()//与 unref 相反，如果这是唯一的服务器，在之前被 unref 了的服务器上调用 ref 将不会让程序退出（默认行为）。如果服务器已经被 ref，则再次调用 ref 并不会产生影响。&lt;br&gt;        //实例&lt;br&gt;          //创建 server.js 文件，代码如下所示：&lt;br&gt;            var net = require(‘net’);&lt;br&gt;            var server = net.createServer(function(connection){&lt;br&gt;              console.log(‘client connected’);&lt;br&gt;              connection.on(‘end’, function(){&lt;br&gt;                console.log(‘客户端关闭连接’);&lt;br&gt;              });&lt;br&gt;              connection.write(‘Hello World!\r\n’);&lt;br&gt;              connection.pipe(connection);&lt;br&gt;            });&lt;br&gt;            server.listen(8080,function(){&lt;br&gt;              console.log(‘server is listening’);&lt;br&gt;            });&lt;br&gt;          //执行以上服务端代码：&lt;br&gt;            node server.js&lt;br&gt;            server is listening # 服务已创建并监听8080端口&lt;br&gt;          //新开一个窗口，创建client.js文件，代码如下：&lt;br&gt;            var net = require(‘net’);&lt;br&gt;            var client = net.connect({port: 8080},function(){&lt;br&gt;              console.log(‘连接服务器！’);&lt;br&gt;            });&lt;br&gt;            client.on(‘data’, function(data){&lt;br&gt;              console.log(data.toString());&lt;br&gt;              client.end();&lt;br&gt;            });&lt;br&gt;            client.on(‘end’,function(){&lt;br&gt;              console.log(‘断开与服务器的连接’);&lt;br&gt;            });&lt;br&gt;          //执行以上客户端的代码：&lt;br&gt;            连接服务器！&lt;br&gt;            Hello World!&lt;br&gt;            断开与服务器的连接&lt;br&gt;    /&lt;/em&gt;Node.js DNS 模块&lt;em&gt;/&lt;br&gt;      //Node.js DNS 模块用于解析域名。引入 DNS 模块语法格式如下：&lt;br&gt;      var dns = require(“dns”)&lt;br&gt;      //方法：&lt;br&gt;        1 dns.lookup(hostname[, options], callback)//将域名（比如 ‘runoob.com’）解析为第一条找到的记录 A （IPV4）或 AAAA(IPV6)。参数 options可以是一个对象或整数。如果没有提供 options，IP v4 和 v6 地址都可以。如果 options 是整数，则必须是 4 或 6。&lt;br&gt;        2 dns.lookupService(address, port, callback)//使用 getnameinfo 解析传入的地址和端口为域名和服务。&lt;br&gt;        3 dns.resolve(hostname[, rrtype], callback)//将一个域名（如 ‘runoob.com’）解析为一个 rrtype 指定记录类型的数组。&lt;br&gt;        4 dns.resolve4(hostname, callback)//和 dns.resolve() 类似, 仅能查询 IPv4 (A 记录）。 addresses IPv4 地址数组 (比如，[‘74.125.79.104’, ‘74.125.79.105’, ‘74.125.79.106’]）。&lt;br&gt;        5 dns.resolve6(hostname, callback)//和 dns.resolve4() 类似， 仅能查询 IPv6( AAAA 查询）&lt;br&gt;        6 dns.resolveMx(hostname, callback)//和 dns.resolve() 类似, 仅能查询邮件交换(MX 记录)。&lt;br&gt;        7 dns.resolveTxt(hostname, callback)//和 dns.resolve() 类似, 仅能进行文本查询 (TXT 记录）。 addresses 是 2-d 文本记录数组。(比如，[ [‘v=spf1 ip4:0.0.0.0 ‘, ‘~all’ ] ]）。 每个子数组包含一条记录的 TXT 块。根据使用情况可以连接在一起，也可单独使用。&lt;br&gt;        8 dns.resolveSrv(hostname, callback)//和 dns.resolve() 类似, 仅能进行服务记录查询 (SRV 记录）。 addresses 是 hostname可用的 SRV 记录数组。 SRV 记录属性有优先级（priority），权重（weight）, 端口（port）, 和名字（name） (比如，[{‘priority’: 10, ‘weight’: 5, ‘port’: 21223, ‘name’: ‘service.example.com’}, …]）。&lt;br&gt;        9 dns.resolveSoa(hostname, callback)//和 dns.resolve() 类似, 仅能查询权威记录(SOA 记录）。&lt;br&gt;        10  dns.resolveNs(hostname, callback)//和 dns.resolve() 类似, 仅能进行域名服务器记录查询(NS 记录）。 addresses 是域名服务器记录数组（hostname 可以使用） (比如, [‘ns1.example.com’, ‘ns2.example.com’]）。&lt;br&gt;        11  dns.resolveCname(hostname, callback)//和 dns.resolve() 类似, 仅能进行别名记录查询 (CNAME记录)。addresses 是对 hostname 可用的别名记录数组 (比如，, [‘bar.example.com’]）。&lt;br&gt;        12  dns.reverse(ip, callback)//反向解析 IP 地址，指向该 IP 地址的域名数组。&lt;br&gt;        13  dns.getServers()//返回一个用于当前解析的 IP 地址数组的字符串。&lt;br&gt;        14  dns.setServers(servers)//指定一组 IP 地址作为解析服务器。&lt;br&gt;      //rrtypes&lt;br&gt;        //dns.resolve()方法中有效的rrtypes值：&lt;br&gt;            ‘A’ IPV4 地址, 默认&lt;br&gt;            ‘AAAA’ IPV6 地址&lt;br&gt;            ‘MX’ 邮件交换记录&lt;br&gt;            ‘TXT’ text 记录&lt;br&gt;            ‘SRV’ SRV 记录&lt;br&gt;            ‘PTR’ 用来反向 IP 查找&lt;br&gt;            ‘NS’ 域名服务器记录&lt;br&gt;            ‘CNAME’ 别名记录&lt;br&gt;            ‘SOA’ 授权记录的初始值&lt;br&gt;      //错误码&lt;br&gt;        //每次 DNS 查询都可能返回以下错误码：&lt;br&gt;            dns.NODATA: 无数据响应。&lt;br&gt;            dns.FORMERR: 查询格式错误。&lt;br&gt;            dns.SERVFAIL: 常规失败。&lt;br&gt;            dns.NOTFOUND: 没有找到域名。&lt;br&gt;            dns.NOTIMP: 未实现请求的操作。&lt;br&gt;            dns.REFUSED: 拒绝查询。&lt;br&gt;            dns.BADQUERY: 查询格式错误。&lt;br&gt;            dns.BADNAME: 域名格式错误。&lt;br&gt;            dns.BADFAMILY: 地址协议不支持。&lt;br&gt;            dns.BADRESP: 回复格式错误。&lt;br&gt;            dns.CONNREFUSED: 无法连接到 DNS 服务器。&lt;br&gt;            dns.TIMEOUT: 连接 DNS 服务器超时。&lt;br&gt;            dns.EOF: 文件末端。&lt;br&gt;            dns.FILE: 读文件错误。&lt;br&gt;            dns.NOMEM: 内存溢出。&lt;br&gt;            dns.DESTRUCTION: 通道被摧毁。&lt;br&gt;            dns.BADSTR: 字符串格式错误。&lt;br&gt;            dns.BADFLAGS: 非法标识符。&lt;br&gt;            dns.NONAME: 所给主机不是数字。&lt;br&gt;            dns.BADHINTS: 非法HINTS标识符。&lt;br&gt;            dns.NOTINITIALIZED: c c-ares 库尚未初始化。&lt;br&gt;            dns.LOADIPHLPAPI: 加载 iphlpapi.dll 出错。&lt;br&gt;            dns.ADDRGETNETWORKPARAMS: 无法找到 GetNetworkParams 函数。&lt;br&gt;            dns.CANCELLED: 取消 DNS 查询。&lt;br&gt;      //实例&lt;br&gt;        //创建 main.js 文件，代码如下所示：&lt;br&gt;          var dns = require(‘dns’);&lt;br&gt;          dns.lookup(‘www.github.com’,function onLookup(err, address, family){&lt;br&gt;            console.log(‘ip 地址：’, address);&lt;br&gt;            dns.reverse(address, function(err, hostname){&lt;br&gt;              if (err) {&lt;br&gt;                console.log(err.stack);&lt;br&gt;              }&lt;br&gt;              console.log(‘反向解析’ + address + ‘:’ + JSON.stringify(hostname));&lt;br&gt;            });&lt;br&gt;          });&lt;br&gt;        //执行以上代码，结果如下所示：&lt;br&gt;          address: 192.30.252.130&lt;br&gt;          reverse for 192.30.252.130: [“github.com”]&lt;br&gt;    /&lt;/em&gt;Node.js Domain 模块*/&lt;br&gt;      //Node.js Domain(域) 简化异步代码的异常处理，可以捕捉处理try catch无法捕捉的异常。引入 Domain 模块 语法格式如下：&lt;br&gt;      var domain = require(“domain”)&lt;br&gt;      //domain模块，把处理多个不同的IO的操作作为一个组。注册事件和回调到domain，当发生一个错误事件或抛出一个错误时，domain对象会被通知，不会丢失上下文环境，也不导致程序错误立即推出，与process.on(‘uncaughtException’)不同。&lt;br&gt;      //Domain 模块可分为隐式绑定和显式绑定：&lt;br&gt;        //隐式绑定: 把在domain上下文中定义的变量，自动绑定到domain对象&lt;br&gt;        //显式绑定: 把不是在domain上下文中定义的变量，以代码的方式绑定到domain对象&lt;br&gt;      //方法：&lt;br&gt;        1 domain.run(function)//在域的上下文运行提供的函数，隐式的绑定了所有的事件分发器，计时器和底层请求。&lt;br&gt;        2 domain.add(emitter)//显式的增加事件&lt;br&gt;        3 domain.remove(emitter)//删除事件。&lt;br&gt;        4 domain.bind(callback)//返回的函数是一个对于所提供的回调函数的包装函数。当调用这个返回的函数被时，所有被抛出的错误都会被导向到这个域的 error 事件。&lt;br&gt;        5 domain.intercept(callback)//和 domain.bind(callback) 类似。除了捕捉被抛出的错误外，它还会拦截 Error 对象作为参数传递到这个函数。&lt;br&gt;        6 domain.enter()//进入一个异步调用的上下文，绑定到domain。&lt;br&gt;        7 domain.exit()//退出当前的domain，切换到不同的链的异步调用的上下文中。对应domain.enter()。&lt;br&gt;        8 domain.dispose()//释放一个domain对象，让node进程回收这部分资源。&lt;br&gt;        9 domain.create()//返回一个domain对象。&lt;br&gt;      //事件：&lt;br&gt;        domain.menbers//已加入domain对象的域定时器和事件发射器的数组。&lt;br&gt;      //实例&lt;br&gt;        //创建 main.js 文件，代码如下所示：&lt;br&gt;          var EventEmitter = require(“events”).EventEmitter;&lt;br&gt;          var domain = require(“domain”);&lt;br&gt;          var emitter1 = new EventEmitter();&lt;br&gt;          // 创建域&lt;br&gt;          var domain1 = domain.create();&lt;br&gt;          domain1.on(‘error’, function(err){&lt;br&gt;             console.log(“domain1 处理这个错误 (“+err.message+”)”);&lt;br&gt;          });&lt;br&gt;          // 显式绑定&lt;br&gt;          domain1.add(emitter1);&lt;br&gt;          emitter1.on(‘error’,function(err){&lt;br&gt;             console.log(“监听器处理此错误 (“+err.message+”)”);&lt;br&gt;          });&lt;br&gt;          emitter1.emit(‘error’,new Error(‘通过监听器来处理’));&lt;br&gt;          emitter1.removeAllListeners(‘error’);&lt;br&gt;          emitter1.emit(‘error’,new Error(‘通过 domain1 处理’));&lt;br&gt;          var domain2 = domain.create();&lt;br&gt;          domain2.on(‘error’, function(err){&lt;br&gt;             console.log(“domain2 处理这个错误 (“+err.message+”)”);&lt;br&gt;          });&lt;br&gt;          // 隐式绑定&lt;br&gt;          domain2.run(function(){&lt;br&gt;             var emitter2 = new EventEmitter();&lt;br&gt;             emitter2.emit(‘error’,new Error(‘通过 domain2 处理’));&lt;br&gt;          });&lt;br&gt;          domain1.remove(emitter1);&lt;br&gt;          emitter1.emit(‘error’, new Error(‘转换为异常，系统将崩溃!’));&lt;br&gt;        //执行以上代码，结果如下所示:&lt;br&gt;          监听器处理此错误 (通过监听器来处理)&lt;br&gt;          domain1 处理这个错误 (通过 domain1 处理)&lt;br&gt;          domain2 处理这个错误 (通过 domain2 处理)&lt;br&gt;          events.js:72&lt;br&gt;                  throw er; // Unhandled ‘error’ event&lt;br&gt;                        ^&lt;br&gt;          Error: 转换为异常，系统将崩溃!&lt;br&gt;              at Object.&lt;anonymous&gt; (/www/node/main.js:40:24)&lt;br&gt;              at Module._compile (module.js:456:26)&lt;br&gt;              at Object.Module._extensions..js (module.js:474:10)&lt;br&gt;              at Module.load (module.js:356:32)&lt;br&gt;              at Function.Module._load (module.js:312:12)&lt;br&gt;              at Function.Module.runMain (module.js:497:10)&lt;br&gt;              at startup (node.js:119:16)&lt;br&gt;              at node.js:929:3&lt;/anonymous&gt;&lt;/p&gt;
&lt;p&gt;/14、Node.js Web 模块 &lt;em&gt;/&lt;br&gt;    /&lt;/em&gt;使用 Node 创建 Web 服务器&lt;em&gt;/&lt;br&gt;      //Node.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块，代码如下：&lt;br&gt;      var http = require(‘http’);&lt;br&gt;      //以下是演示一个最基本的 HTTP 服务器架构(使用8081端口)，创建 server.js 文件，代码如下所示：&lt;br&gt;        var http = require(‘http’);&lt;br&gt;        var fs = require(‘fs’);&lt;br&gt;        var url = require(‘url’);&lt;br&gt;        //创建服务器&lt;br&gt;        http.createServer(function(request,response){&lt;br&gt;          //解析请求，包括文件名&lt;br&gt;          var pathname = url.parse(request.url).pathname;&lt;br&gt;          //输出请求文件名&lt;br&gt;          console.log(“Request for “ + pathname + “ received.”);&lt;br&gt;          //从文件系统中读取请求的文件内容&lt;br&gt;          fs.readFile(pathname.substr(1), function (err, data){&lt;br&gt;            if (err) {&lt;br&gt;              console.log(err);&lt;br&gt;              //HTTP 状态码：404：NOT FOUND&lt;br&gt;              //Content Type：text/plain&lt;br&gt;              response.writeHead(404, {‘Content-Type’: ‘text/html’});&lt;br&gt;            } else{&lt;br&gt;              //HTTP 状态码：200：OK&lt;br&gt;              //Content Type：text/plain&lt;br&gt;              response.writeHead(200, {‘Content-Type’: ‘text/html’});&lt;br&gt;              //响应文件内容&lt;br&gt;              response.write(data.toString());&lt;br&gt;            };&lt;br&gt;            //发送响应数据&lt;br&gt;            response.end();&lt;br&gt;          });&lt;br&gt;        }).listen(8081);&lt;br&gt;        //控制台会输出以下信息&lt;br&gt;        console.log(‘Server running at &lt;a href=&quot;http://127.0.0.1:8081/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:8081/&lt;/a&gt;‘);&lt;br&gt;      //接下来我们在该目录下创建一个 index.htm 文件，代码如下：&lt;br&gt;        &lt;html&gt;&lt;br&gt;        &lt;head&gt;&lt;br&gt;        &lt;title&gt;Sample Page&lt;/title&gt;&lt;br&gt;        &lt;/head&gt;&lt;br&gt;        &lt;body&gt;&lt;br&gt;            Hello World!&lt;br&gt;        &lt;/body&gt;&lt;br&gt;        &lt;/html&gt;&lt;br&gt;      //执行 server.js 文件：&lt;br&gt;        node server.js&lt;br&gt;        Server running at &lt;a href=&quot;http://127.0.0.1:8081/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:8081/&lt;/a&gt;&lt;br&gt;    /&lt;/em&gt;使用 Node 创建 Web 客户端*/&lt;br&gt;      //Node 创建 Web 客户端需要引入 http 模块，创建 client.js 文件，代码如下所示：&lt;br&gt;        &lt;pre&gt;&lt;br&gt;        var http = require(‘http’);&lt;br&gt;        //用于请求选项&lt;br&gt;        var optionss = {&lt;br&gt;          host:’localhost’,&lt;br&gt;          port:’8081’&lt;br&gt;          path:’/index.htm’&lt;br&gt;        };&lt;br&gt;        //处理响应的回调函数&lt;br&gt;        var callback = function(response){&lt;br&gt;          //不断更新数据&lt;br&gt;          var body = ‘’;&lt;br&gt;          response.on(‘data’, function(data){&lt;br&gt;            body += data;&lt;br&gt;          });&lt;br&gt;          response.on(‘end’, function(){&lt;br&gt;            //数据接收完成&lt;br&gt;            console.log(body);&lt;br&gt;          });&lt;br&gt;        }&lt;br&gt;        //向服务器端发送请求&lt;br&gt;        var req = http.request(options, callback);&lt;br&gt;        req.end();&lt;br&gt;      //新开一个终端，执行 client.js 文件，输出结果如下：&lt;br&gt;        node client.js&lt;br&gt;        &lt;html&gt;&lt;br&gt;        &lt;head&gt;&lt;br&gt;        &lt;title&gt;Sample Page&lt;/title&gt;&lt;br&gt;        &lt;/head&gt;&lt;br&gt;        &lt;body&gt;&lt;br&gt;        Hello World!&lt;br&gt;        &lt;/body&gt;&lt;br&gt;        &lt;/html&gt;&lt;br&gt;      //执行 server.js 的控制台输出信息如下：&lt;br&gt;        Server running at &lt;a href=&quot;http://127.0.0.1:8081/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:8081/&lt;/a&gt;&lt;br&gt;        Request for /index.htm received.   # 客户端请求信息&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;/15、Node.js Express 框架 &lt;em&gt;/&lt;br&gt;    //Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。使用 Express 可以快速地搭建一个完整功能的网站。&lt;br&gt;    //Express 框架核心特性：1、可以设置中间件来响应 HTTP 请求。2、定义了路由表用于执行不同的 HTTP 请求动作。3、可以通过向模板传递参数来动态渲染 HTML 页面。&lt;br&gt;    /&lt;/em&gt;安装 Express&lt;em&gt;/&lt;br&gt;      //安装 Express 并将其保存到依赖列表中：&lt;br&gt;        npm install express –save&lt;br&gt;      //以上命令会将 Express 框架安装在当期目录的 node_modules 目录中， node_modules 目录下会自动创建 express 目录。以下几个重要的模块是需要与 express 框架一起安装的：&lt;br&gt;        //body-parser - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。&lt;br&gt;        //cookie-parser - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。&lt;br&gt;        //multer - node.js 中间件，用于处理 enctype=”multipart/form-data”（设置表单的MIME编码）的表单数据。&lt;br&gt;          npm install body-parser –save&lt;br&gt;          npm install cookie-parser –save&lt;br&gt;          npm install multer –save&lt;br&gt;    /&lt;/em&gt;第一个 Express 框架实例&lt;em&gt;/&lt;br&gt;      //接下来我们使用 Express 框架来输出 “Hello World”。以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。&lt;br&gt;      //创建 express_demo.js 文件，代码如下所示：&lt;br&gt;        var express = require(‘express’);&lt;br&gt;        var app = express();&lt;br&gt;        app.get(‘/‘, function (req,res){&lt;br&gt;          res.send(‘Hello World’);&lt;br&gt;        });&lt;br&gt;        var server = app.listen(8081, function(){&lt;br&gt;          var host = server.address().address;&lt;br&gt;          var port = server.address().port;&lt;br&gt;          console.log(“应用实例，访问地址为 &lt;a href=&quot;http://%s:%s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://%s:%s&lt;/a&gt;“, host, port);&lt;br&gt;        });&lt;br&gt;      //执行以上代码：&lt;br&gt;        node express_demo.js&lt;br&gt;        应用实例，访问地址为 &lt;a href=&quot;http://0.0.0.0:8081&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.0.0.0:8081&lt;/a&gt;&lt;br&gt;      //在浏览器中访问 &lt;a href=&quot;http://127.0.0.1:8081，结果如下所示：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:8081，结果如下所示：&lt;/a&gt;&lt;br&gt;        Hello World&lt;br&gt;    /&lt;/em&gt;请求和响应&lt;em&gt;/&lt;br&gt;      //Express 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。&lt;br&gt;        /&lt;/em&gt;Request 对象&lt;em&gt;/&lt;br&gt;          //request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：&lt;br&gt;              req.app：当callback为外部文件时，用req.app访问express的实例&lt;br&gt;              req.baseUrl：获取路由当前安装的URL路径&lt;br&gt;              req.body / req.cookies：获得「请求主体」/ Cookies&lt;br&gt;              req.fresh / req.stale：判断请求是否还「新鲜」&lt;br&gt;              req.hostname / req.ip：获取主机名和IP地址&lt;br&gt;              req.originalUrl：获取原始请求URL&lt;br&gt;              req.params：获取路由的parameters&lt;br&gt;              req.path：获取请求路径&lt;br&gt;              req.protocol：获取协议类型&lt;br&gt;              req.query：获取URL的查询参数串&lt;br&gt;              req.route：获取当前匹配的路由&lt;br&gt;              req.subdomains：获取子域名&lt;br&gt;              req.accpets（）：检查请求的Accept头的请求类型&lt;br&gt;              req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages&lt;br&gt;              req.get（）：获取指定的HTTP请求头&lt;br&gt;              req.is（）：判断请求头Content-Type的MIME类型&lt;br&gt;        /&lt;/em&gt;Response 对象&lt;em&gt;/&lt;br&gt;          // response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：&lt;br&gt;              res.app：同req.app一样&lt;br&gt;              res.append（）：追加指定HTTP头&lt;br&gt;              res.set（）在res.append（）后将重置之前设置的头&lt;br&gt;              res.cookie（name，value [，option]）：设置Cookie&lt;br&gt;              opition: domain / expires / httpOnly / maxAge / path / secure / signed&lt;br&gt;              res.clearCookie（）：清除Cookie&lt;br&gt;              res.download（）：传送指定路径的文件&lt;br&gt;              res.get（）：返回指定的HTTP头&lt;br&gt;              res.json（）：传送JSON响应&lt;br&gt;              res.jsonp（）：传送JSONP响应&lt;br&gt;              res.location（）：只设置响应的Location HTTP头，不设置状态码或者close response&lt;br&gt;              res.redirect（）：设置响应的Location HTTP头，并且设置状态码302&lt;br&gt;              res.send（）：传送HTTP响应&lt;br&gt;              res.sendFile（path [，options] [，fn]）：传送指定路径的文件 -会自动根据文件extension设定Content-Type&lt;br&gt;              res.set（）：设置HTTP头，传入object可以一次设置多个头&lt;br&gt;              res.status（）：设置HTTP状态码&lt;br&gt;              res.type（）：设置Content-Type的MIME类型&lt;br&gt;    /&lt;/em&gt;路由&lt;em&gt;/&lt;br&gt;      // 我们已经了解了 HTTP 请求的基本应用，而路由决定了由谁(指定脚本)去响应客户端请求。在HTTP请求中，我们可以通过路由提取出请求的URL以及GET/POST参数。接下来我们扩展 Hello World，添加一些功能来处理更多类型的 HTTP 请求。&lt;br&gt;      //创建 express_demo2.js 文件，代码如下所示：&lt;br&gt;        var express = require(‘express’);&lt;br&gt;        var app = express();&lt;br&gt;        //主页输出”Hello World”&lt;br&gt;        app.get(‘/‘, function (req, res){&lt;br&gt;          console.log(“主页GET请求”);&lt;br&gt;          res.send(‘Hello GET’);&lt;br&gt;        });&lt;br&gt;        //POST请求&lt;br&gt;        app.post(‘/‘, function (req, res){&lt;br&gt;          console.log(“主页 POST 请求”);&lt;br&gt;          res.send(‘Hello POST’);&lt;br&gt;        });&lt;br&gt;        // /del_user页面响应&lt;br&gt;        app.delete(‘/del_user’, function (req, res){&lt;br&gt;          console.log(“/del_user响应 DELETE 请求”);&lt;br&gt;          res.send(‘删除页面’);&lt;br&gt;        });&lt;br&gt;        // /list_user 页面 GET 请求&lt;br&gt;        app.get(‘/list_user’, function (req, res){&lt;br&gt;          console.log(“/list_user 页面 GET 请求”);&lt;br&gt;          res.send(‘用户列表页面’);&lt;br&gt;        });&lt;br&gt;        // 对页面 abcd, abxcd, ab123cd, 等响应GET请求&lt;br&gt;        app.get(‘/ab&lt;/em&gt;cd’, function (req, res){&lt;br&gt;          console.log(“/ab&lt;em&gt;cd GET 请求”);&lt;br&gt;          res.send(‘正则匹配’)&lt;br&gt;        });&lt;br&gt;        var server = app.listen(8081,function(){&lt;br&gt;          var host = server.address().address;&lt;br&gt;          var port = server.address().port;&lt;br&gt;          console.log(“应用实例，访问地址为 &lt;a href=&quot;http://%s:%s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://%s:%s&lt;/a&gt;“, host, port);&lt;br&gt;        });&lt;br&gt;      //执行以上代码：&lt;br&gt;        node express_demo2.js&lt;br&gt;        应用实例，访问地址为 &lt;a href=&quot;http://0.0.0.0:8081&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.0.0.0:8081&lt;/a&gt;&lt;br&gt;      //接下来你可以尝试访问 &lt;a href=&quot;http://127.0.0.1:8081&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:8081&lt;/a&gt; 不同的地址，查看效果。&lt;br&gt;        访问 &lt;a href=&quot;http://127.0.0.1:8081/list_user&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:8081/list_user&lt;/a&gt; 结果：用户列表页&lt;br&gt;        访问 &lt;a href=&quot;http://127.0.0.1:8081/abcd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:8081/abcd&lt;/a&gt; 结果：正则匹配&lt;br&gt;        访问 &lt;a href=&quot;http://127.0.0.1:8081/abcdefg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:8081/abcdefg&lt;/a&gt; 结果：Cannot GET/abcdefg 无法解析该地址&lt;br&gt;    /&lt;/em&gt;静态文件&lt;em&gt;/&lt;br&gt;      //Express 提供了内置的中间件 express.static 来设置静态文件如：图片， CSS, JavaScript 等。你可以使用 express.static 中间件来设置静态文件路径。例如，如果你将图片， CSS, JavaScript 文件放在 public 目录下，你可以这么写：&lt;br&gt;        app.use(express.static(‘public’));//public为放置静态文件的目录&lt;br&gt;      //我们可以到 public/images 目录下放些图片,如下所示：&lt;br&gt;        node_modules&lt;br&gt;        server.js&lt;br&gt;        public/&lt;br&gt;        public/images&lt;br&gt;        public/images/logo.png&lt;br&gt;      // 让我们再修改下 “Hello Word” 应用添加处理静态文件的功能。&lt;br&gt;      //创建 express_demo3.js 文件，代码如下所示：&lt;br&gt;        var express = require(‘express’);&lt;br&gt;        var app = express();&lt;br&gt;        app.use(express.static(‘public’));&lt;br&gt;        app.get(‘/‘, function (req, res){&lt;br&gt;          res.send(‘Hello World’);&lt;br&gt;        });&lt;br&gt;        var server = app.listen(8081, function(){&lt;br&gt;          var host = server.address().address;&lt;br&gt;          var port = server.address().port;&lt;br&gt;          console.log(“应用实例，访问地址为 &lt;a href=&quot;http://%s:%s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://%s:%s&lt;/a&gt;“, host, port);&lt;br&gt;        })&lt;br&gt;      //执行以上代码：&lt;br&gt;        node express_demo3.js&lt;br&gt;        应用实例，访问地址为 &lt;a href=&quot;http://0.0.0.0:8081&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.0.0.0:8081&lt;/a&gt;&lt;br&gt;      //在浏览器中访问 &lt;a href=&quot;http://127.0.0.1:8081/images/logo.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:8081/images/logo.png&lt;/a&gt; ,结果展示了图片。&lt;br&gt;    /&lt;/em&gt;GET 方法&lt;em&gt;/&lt;br&gt;      // 以下实例演示了在表单中通过 GET 方法提交两个参数，我们可以使用 server.js 文件内的 process_get 路由器来处理输入：&lt;br&gt;      //index.htm 文件代码如下：&lt;br&gt;        &lt;html&gt;&lt;br&gt;          &lt;body&gt;&lt;br&gt;            &lt;form action=&quot;http://127.0.0.1:8081/process_get&quot; method=&quot;GET&quot;&gt;&lt;br&gt;              First Name:&lt;input type=&quot;text&quot; name=&quot;first_name&quot;&gt;&lt;br&gt;&lt;br&gt;              Last Name: &lt;input type=&quot;text&quot; name=&quot;last_name&quot;&gt;&lt;br&gt;              &lt;input type=&quot;submit&quot; name=&quot;Submit&quot;&gt;&lt;br&gt;            &lt;/form&gt;&lt;br&gt;          &lt;/body&gt;&lt;br&gt;        &lt;/html&gt;&lt;br&gt;      //server.js文件：&lt;br&gt;        var express = require(‘express’);&lt;br&gt;        var app = express();&lt;br&gt;        app.use(express.static(‘public’));&lt;br&gt;        app.get(‘/index.htm’, function (req, res){&lt;br&gt;          res.sendFile(__dirname + “/“ + “index.htm”);&lt;br&gt;        });&lt;br&gt;        app.get(‘/process_get’, function (req, res){&lt;br&gt;          //输出JSON格式&lt;br&gt;          response = {&lt;br&gt;            first_name:req.query.first_name,&lt;br&gt;            last_name:req.query.last_name&lt;br&gt;          };&lt;br&gt;          console.log(response);&lt;br&gt;          res.end(JSON.stringify(response));&lt;br&gt;        });&lt;br&gt;        var server = app.listen(8081, function(){&lt;br&gt;          var host = server.address().address;&lt;br&gt;          var port = server.address().port;&lt;br&gt;          console.log(“应用实例，访问地址为 &lt;a href=&quot;http://%s:%s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://%s:%s&lt;/a&gt;“, host, port);&lt;br&gt;        });&lt;br&gt;      //执行以上代码：&lt;br&gt;        node server.js&lt;br&gt;        应用实例，访问地址为 &lt;a href=&quot;http://0.0.0.0:8081&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.0.0.0:8081&lt;/a&gt;&lt;br&gt;      //浏览器访问 &lt;a href=&quot;http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：&lt;/a&gt;&lt;br&gt;        {“first_name”:”aaa”,”last_name”:”bbb”}&lt;br&gt;    /&lt;/em&gt;POST 方法&lt;em&gt;/&lt;br&gt;      // 以下实例演示了在表单中通过 POST 方法提交两个参数，我们可以使用 server.js 文件内的 process_get 路由器来处理输入：&lt;br&gt;      //index.htm 文件代码修改如下：&lt;br&gt;        &lt;html&gt;&lt;br&gt;          &lt;body&gt;&lt;br&gt;            &lt;form action=&quot;http://127.0.0.1:8081/process_post&quot; method=&quot;POST&quot;&gt;&lt;br&gt;              First Name: &lt;input type=&quot;text&quot; name=&quot;first_name&quot;&gt;&lt;br&gt;&lt;br&gt;              Last Name: &lt;input type=&quot;text&quot; name=&quot;last_name&quot;&gt;&lt;br&gt;              &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;br&gt;            &lt;/form&gt;&lt;br&gt;          &lt;/body&gt;&lt;br&gt;        &lt;/html&gt;&lt;br&gt;      //server.js 文件代码修改如下:&lt;br&gt;        var express = require(‘express’);&lt;br&gt;        var app = express();&lt;br&gt;        var bodyParser = require(‘body-parser’);&lt;br&gt;        //创建application/x-www-form-urlencode编码解析&lt;br&gt;        var urlencodedParser = bodyParser.urlencoded({extended:false});&lt;br&gt;        app.use(express.static(‘public’));&lt;br&gt;        app.get(‘/index.htm’, function (req, res) {&lt;br&gt;          res.sendFile(__dirname + “/“ + “index.htm”);&lt;br&gt;        });&lt;br&gt;        app.post(‘/process_post’, urlencodedParser, function (req, res){&lt;br&gt;          //输出 JSON 格式&lt;br&gt;          response = {&lt;br&gt;            first_name:req.body.first_name,&lt;br&gt;            last_name:req.body.last_name&lt;br&gt;          };&lt;br&gt;          console.log(response);&lt;br&gt;          res.end(JSON.stringify(response));&lt;br&gt;        });&lt;br&gt;        var server = app.listen(8081, function(){&lt;br&gt;          var host = server.address().address;&lt;br&gt;          var port = server.address().port;&lt;br&gt;          console.log(“应用实例，访问地址为 &lt;a href=&quot;http://%s:%s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://%s:%s&lt;/a&gt;“, host, port);&lt;br&gt;        });&lt;br&gt;      //执行以上代码：&lt;br&gt;        node server.js&lt;br&gt;        应用实例，访问地址为 &lt;a href=&quot;http://0.0.0.0:8081&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.0.0.0:8081&lt;/a&gt;&lt;br&gt;      //浏览器访问 &lt;a href=&quot;http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：&lt;/a&gt;&lt;br&gt;        {“first_name”:”aaa”,”last_name”:”bbb”}&lt;br&gt;    /&lt;/em&gt;文件上传&lt;em&gt;/&lt;br&gt;      //以下我们创建一个用于上传文件的表单，使用 POST 方法，表单 enctype 属性设置为 multipart/form-data。&lt;br&gt;      //index.htm 文件代码修改如下：&lt;br&gt;        &lt;html&gt;&lt;br&gt;          &lt;head&gt;&lt;br&gt;            &lt;title&gt;文件上传表单&lt;/title&gt;&lt;br&gt;          &lt;/head&gt;&lt;br&gt;          &lt;body&gt;&lt;br&gt;            &lt;h3&gt;文件上传：&lt;/h3&gt;&lt;br&gt;            选择一个文件上传: &lt;br&gt;&lt;br&gt;            &lt;form action=&quot;/file_upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;&lt;br&gt;              &lt;input type=&quot;file&quot; name=&quot;image&quot; size=&quot;50&quot;&gt;&lt;br&gt;&lt;br&gt;              &lt;input type=&quot;submit&quot; value=&quot;上传文件&quot;&gt;&lt;br&gt;            &lt;/form&gt;&lt;br&gt;          &lt;/body&gt;&lt;br&gt;        &lt;/html&gt;&lt;br&gt;      //server.js 文件代码修改如下:&lt;br&gt;        var express = require(‘express’);&lt;br&gt;        var app = express();&lt;br&gt;        var fs = require(“fs”);&lt;br&gt;        var bodyParser = require(‘body-parser’);&lt;br&gt;        var multer = require(‘multer’);&lt;br&gt;        app.use(express.static(‘public’));&lt;br&gt;        app.use(bodyParser.urlencoded({extended:false}));&lt;br&gt;        app.use(multer({dest:’/tmp/‘}).array(‘image’));&lt;br&gt;        app.get(‘/index.htm’, function (req, res) {&lt;br&gt;          res.sendFile(&lt;strong&gt;dirname + “/“ + “index.htm”);&lt;br&gt;        });&lt;br&gt;        app.post(‘/file_upload’, function (req, res) {&lt;br&gt;          console.log(req.files[0]);//上传文件信息&lt;br&gt;          var des_file = &lt;/strong&gt;dirname + “/“ + req.files[0].originalname;&lt;br&gt;          fs.readFile(req. files[0].path, function (err, data) {&lt;br&gt;            fs.writeFile(des_file, data, function (err) {&lt;br&gt;              if (err) {&lt;br&gt;                console.log(err);&lt;br&gt;              } else{&lt;br&gt;                response = {&lt;br&gt;                  message:’File uploaded successfully’,&lt;br&gt;                  filename:req.files[0].originalname&lt;br&gt;                };&lt;br&gt;              };&lt;br&gt;              console.log(response);&lt;br&gt;              res.end(JSON.stringify(response));&lt;br&gt;            });&lt;br&gt;          });&lt;br&gt;        });&lt;br&gt;        var server = app.listen(8081,function() {&lt;br&gt;          var host = server.address().address;&lt;br&gt;          var port = server.address().port;&lt;br&gt;          console.log(“应用实例，访问地址为 &lt;a href=&quot;http://%s:%s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://%s:%s&lt;/a&gt;“, host, port);&lt;br&gt;        });&lt;br&gt;      //执行以上代码：&lt;br&gt;        node server.js&lt;br&gt;        应用实例，访问地址为 &lt;a href=&quot;http://0.0.0.0:8081&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.0.0.0:8081&lt;/a&gt;&lt;br&gt;      //浏览器访问 &lt;a href=&quot;http://127.0.0.1:8081/index.htm,上传本地文件a.jpg，结果：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:8081/index.htm,上传本地文件a.jpg，结果：&lt;/a&gt;&lt;br&gt;        {“message”:”File uploaded successfully”,”filename”:”a.jpg”}&lt;br&gt;    /&lt;/em&gt;Cookie 管理*/&lt;br&gt;      //我们可以使用中间件向 Node.js 服务器发送 cookie 信息，以下代码输出了客户端发送的 cookie 信息：&lt;br&gt;      // express_cookie.js文件&lt;br&gt;        var express = require(‘express’);&lt;br&gt;        var cookieParser = require(‘cookie-parser’);&lt;br&gt;        var app = express();&lt;br&gt;        app.use(cookieParser());&lt;br&gt;        app.get(‘/‘, function (req, res) {&lt;br&gt;          console.log(“Cookies: “, req.cookies);&lt;br&gt;        });&lt;br&gt;        app.listen(8081);&lt;/p&gt;
&lt;p&gt;/16、Node.js RESTful API &lt;em&gt;/&lt;br&gt;    //REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。 表述性状态转移是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful。需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML（标准通用标记语言下的一个子集）以及HTML（标准通用标记语言下的一个应用）这些现有的广泛流行的协议和标准。REST 通常使用 JSON 数据格式。&lt;br&gt;    /&lt;/em&gt;HTTP 方法&lt;em&gt;/&lt;br&gt;      //以下为 REST 基本架构的四个方法：&lt;br&gt;        GET - 用于获取数据。&lt;br&gt;        PUT - 用于添加数据。&lt;br&gt;        DELETE - 用于删除数据。&lt;br&gt;        POST - 用于更新或添加数据。&lt;br&gt;    /&lt;/em&gt;创建 RESTful&lt;em&gt;/&lt;br&gt;      //首先，创建一个 json 数据资源文件 users.json，内容如下：&lt;br&gt;        {&lt;br&gt;           “user1” : {&lt;br&gt;              “name” : “mahesh”,&lt;br&gt;            “password” : “password1”,&lt;br&gt;            “profession” : “teacher”,&lt;br&gt;            “id”: 1&lt;br&gt;           },&lt;br&gt;           “user2” : {&lt;br&gt;              “name” : “suresh”,&lt;br&gt;            “password” : “password2”,&lt;br&gt;            “profession” : “librarian”,&lt;br&gt;            “id”: 2&lt;br&gt;           },&lt;br&gt;           “user3” : {&lt;br&gt;              “name” : “ramesh”,&lt;br&gt;            “password” : “password3”,&lt;br&gt;            “profession” : “clerk”,&lt;br&gt;            “id”: 3&lt;br&gt;           }&lt;br&gt;        }&lt;br&gt;      //基于以上数据，我们创建以下 RESTful API：&lt;br&gt;        序号  URI       HTTP方法  发送内容   结果&lt;br&gt;          1   listUsers   GET     空          显示所有用户列表&lt;br&gt;          2   addUser   POST      JSON 字符串   添加新用户&lt;br&gt;          3   deleteUser  DELETE    JSON 字符串   删除用户&lt;br&gt;          4   :id       GET     空          显示用户详细信息&lt;br&gt;      /&lt;/em&gt;获取用户列表：listUsers&lt;em&gt;/&lt;br&gt;        //创建 RESTful API listUsers，用于读取用户的信息列表， server.js 文件代码如下所示：&lt;br&gt;          var express = require(‘express’);&lt;br&gt;          var app = express();&lt;br&gt;          var fs = require(‘fs’);&lt;br&gt;          app.get(‘./listUsers’, function (req, res){&lt;br&gt;            fs.readFile(__dirname + “/“ + “users.Json”, ‘utf8’, function (err, data){&lt;br&gt;              console.log(data);&lt;br&gt;              res.end(data);&lt;br&gt;            });&lt;br&gt;          });&lt;br&gt;          var server = app.listen(8081, function(){&lt;br&gt;            var host = server.address().address;&lt;br&gt;            var port = server.address().port;&lt;br&gt;            console.log(“应用实例，访问地址为 &lt;a href=&quot;http://%s:%s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://%s:%s&lt;/a&gt;“, host, port)&lt;br&gt;          });&lt;br&gt;        //接下来执行以下命令：&lt;br&gt;          node server.js&lt;br&gt;          应用实例，访问地址为 &lt;a href=&quot;http://0.0.0.0:8081&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.0.0.0:8081&lt;/a&gt;&lt;br&gt;        //在浏览器中访问 &lt;a href=&quot;http://127.0.0.1:8081/listUsers，结果如下所示：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:8081/listUsers，结果如下所示：&lt;/a&gt;&lt;br&gt;          {&lt;br&gt;             “user1” : {&lt;br&gt;                “name” : “mahesh”,&lt;br&gt;                “password” : “password1”,&lt;br&gt;                “profession” : “teacher”,&lt;br&gt;                “id”: 1&lt;br&gt;             },&lt;br&gt;             “user2” : {&lt;br&gt;                “name” : “suresh”,&lt;br&gt;                “password” : “password2”,&lt;br&gt;                “profession” : “librarian”,&lt;br&gt;                “id”: 2&lt;br&gt;             },&lt;br&gt;             “user3” : {&lt;br&gt;                “name” : “ramesh”,&lt;br&gt;                “password” : “password3”,&lt;br&gt;                “profession” : “clerk”,&lt;br&gt;                “id”: 3&lt;br&gt;             }&lt;br&gt;          }&lt;br&gt;      /&lt;/em&gt;添加用户：addUser&lt;em&gt;/&lt;br&gt;        //创建 RESTful API addUser， 用于添加新的用户数据，server.js 文件代码如下所示：&lt;br&gt;          var express = require(‘express’);&lt;br&gt;          var app = express();&lt;br&gt;          var fs = require(‘fs’);&lt;br&gt;          //添加的新用户数据&lt;br&gt;          var user = {&lt;br&gt;            “user4” : {&lt;br&gt;                “name” : “mohit”,&lt;br&gt;                “password” : “password4”,&lt;br&gt;                “profession” : “teacher”,&lt;br&gt;                “id”: 4&lt;br&gt;            }&lt;br&gt;          };&lt;br&gt;          app.get(‘./addUser’, function (req, res){&lt;br&gt;            //读取已存在的数据&lt;br&gt;            fs.readFile(__dirname + “/“ + “users.Json”, ‘utf8’, function (err, data){&lt;br&gt;              data = JSON.parse(data);&lt;br&gt;              data[“user4”] = user[“user4”];&lt;br&gt;              console.log(data);&lt;br&gt;              res.end(JSON.stringify(data));&lt;br&gt;            });&lt;br&gt;          });&lt;br&gt;          var server = app.listen(8081, function(){&lt;br&gt;            var host = server.address().address;&lt;br&gt;            var port = server.address().port;&lt;br&gt;            console.log(“应用实例，访问地址为 &lt;a href=&quot;http://%s:%s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://%s:%s&lt;/a&gt;“, host, port)&lt;br&gt;          });&lt;br&gt;        //接下来执行以下命令：&lt;br&gt;          node server.js&lt;br&gt;          应用实例，访问地址为 &lt;a href=&quot;http://0.0.0.0:8081&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.0.0.0:8081&lt;/a&gt;&lt;br&gt;        // 在浏览器中访问 &lt;a href=&quot;http://127.0.0.1:8081/addUser，结果如下所示：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:8081/addUser，结果如下所示：&lt;/a&gt;&lt;br&gt;          { user1:&lt;br&gt;             { name: ‘mahesh’,&lt;br&gt;               password: ‘password1’,&lt;br&gt;               profession: ‘teacher’,&lt;br&gt;               id: 1 },&lt;br&gt;            user2:&lt;br&gt;             { name: ‘suresh’,&lt;br&gt;               password: ‘password2’,&lt;br&gt;               profession: ‘librarian’,&lt;br&gt;               id: 2 },&lt;br&gt;            user3:&lt;br&gt;             { name: ‘ramesh’,&lt;br&gt;               password: ‘password3’,&lt;br&gt;               profession: ‘clerk’,&lt;br&gt;               id: 3 },&lt;br&gt;            user4:&lt;br&gt;             { name: ‘mohit’,&lt;br&gt;               password: ‘password4’,&lt;br&gt;               profession: ‘teacher’,&lt;br&gt;               id: 4 }&lt;br&gt;          }&lt;br&gt;      /&lt;/em&gt;删除用户：deleteUser&lt;em&gt;/&lt;br&gt;        //创建 RESTful API deleteUser， 用于删除指定用户的详细信息，以下实例中，用户 id 为 2，server.js 文件代码如下所示：&lt;br&gt;          var express = require(‘express’);&lt;br&gt;          var app = express();&lt;br&gt;          var fs = require(‘fs’);&lt;br&gt;          app.get(‘./deleteUser’, function (req, res){&lt;br&gt;            //读取已存在的数据&lt;br&gt;            fs.readFile(__dirname + “/“ + “users.Json”, ‘utf8’, function (err, data){&lt;br&gt;              data = JSON.parse(data);&lt;br&gt;              delete data[“user”+2];&lt;br&gt;              console.log(data);&lt;br&gt;              res.end(JSON.stringify(data));&lt;br&gt;            });&lt;br&gt;          });&lt;br&gt;          var server = app.listen(8081, function(){&lt;br&gt;            var host = server.address().address;&lt;br&gt;            var port = server.address().port;&lt;br&gt;            console.log(“应用实例，访问地址为 &lt;a href=&quot;http://%s:%s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://%s:%s&lt;/a&gt;“, host, port)&lt;br&gt;          });&lt;br&gt;        //接下来执行以下命令：&lt;br&gt;          node server.js&lt;br&gt;          应用实例，访问地址为 &lt;a href=&quot;http://0.0.0.0:8081&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.0.0.0:8081&lt;/a&gt;&lt;br&gt;        // 在浏览器中访问 &lt;a href=&quot;http://127.0.0.1:8081/deleteUser，结果如下所示：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:8081/deleteUser，结果如下所示：&lt;/a&gt;&lt;br&gt;          { user1:&lt;br&gt;             { name: ‘mahesh’,&lt;br&gt;               password: ‘password1’,&lt;br&gt;               profession: ‘teacher’,&lt;br&gt;               id: 1 },&lt;br&gt;            user3:&lt;br&gt;             { name: ‘ramesh’,&lt;br&gt;               password: ‘password3’,&lt;br&gt;               profession: ‘clerk’,&lt;br&gt;               id: 3 },&lt;br&gt;          }&lt;br&gt;      /&lt;/em&gt;显示用户详情：:id(用户id)*/&lt;br&gt;        //创建 RESTful API :id（用户id）， 用于读取指定用户的详细信息，server.js 文件代码如下所示：&lt;br&gt;          var express = require(‘express’);&lt;br&gt;          var app = express();&lt;br&gt;          var fs = require(‘fs’);&lt;br&gt;          app.get(‘./:id’, function (req, res){&lt;br&gt;            //读取已存在的数据&lt;br&gt;            fs.readFile(__dirname + “/“ + “users.Json”, ‘utf8’, function (err, data){&lt;br&gt;              data = JSON.parse(data);&lt;br&gt;              var user = data[“user” + req.params.id]&lt;br&gt;              console.log(user);&lt;br&gt;              res.end(JSON.stringify(user));&lt;br&gt;            });&lt;br&gt;          });&lt;br&gt;          var server = app.listen(8081, function(){&lt;br&gt;            var host = server.address().address;&lt;br&gt;            var port = server.address().port;&lt;br&gt;            console.log(“应用实例，访问地址为 &lt;a href=&quot;http://%s:%s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://%s:%s&lt;/a&gt;“, host, port)&lt;br&gt;          });&lt;br&gt;        //接下来执行以下命令：&lt;br&gt;          node server.js&lt;br&gt;          应用实例，访问地址为 &lt;a href=&quot;http://0.0.0.0:8081&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.0.0.0:8081&lt;/a&gt;&lt;br&gt;        // 在浏览器中访问 &lt;a href=&quot;http://127.0.0.1:8081/2，结果如下所示：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:8081/2，结果如下所示：&lt;/a&gt;&lt;br&gt;          {&lt;br&gt;             “name”:”suresh”,&lt;br&gt;             “password”:”password2”,&lt;br&gt;             “profession”:”librarian”,&lt;br&gt;             “id”:2&lt;br&gt;          }&lt;/p&gt;
&lt;p&gt;/17、Node.js 多进程&lt;em&gt;/&lt;br&gt;    // 我们都知道 Node.js 是以单线程的模式运行的，但它使用的是事件驱动来处理并发，这样有助于我们在多核 cpu 的系统上创建多个子进程，从而提高性能。每个子进程总是带有三个流对象：child.stdin, child.stdout 和child.stderr。他们可能会共享父进程的 stdio 流，或者也可以是独立的被导流的流对象。&lt;br&gt;    //Node 提供了 child_process 模块来创建子进程，方法有：&lt;br&gt;      exec - child_process.exec//使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。&lt;br&gt;      spawn - child_process.spawn//使用指定的命令行参数创建新线程。&lt;br&gt;      fork - child_process.fork//是 spawn()的特殊形式，用于在子进程中运行的模块，如 fork(‘./son.js’) 相当于 spawn(‘node’, [‘./son.js’]) 。与spawn方法不同的是，fork会在父进程与子进程之间，建立一个通信管道，用于进程之间的通信。&lt;br&gt;    /&lt;/em&gt;exec()方法&lt;em&gt;/&lt;br&gt;      //child_process.exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。语法如下所示：&lt;br&gt;        child_process.exec(command[, options], callback)&lt;br&gt;      //参数说明如下：&lt;br&gt;        command//字符串， 将要运行的命令，参数使用空格隔开&lt;br&gt;        options//对象，可以是：&lt;br&gt;          /&lt;/em&gt;cwd ，字符串，子进程的当前工作目录&lt;br&gt;            env，对象 环境变量键值对&lt;br&gt;            encoding ，字符串，字符编码（默认： ‘utf8’）&lt;br&gt;            shell ，字符串，将要执行命令的 Shell（默认: 在 UNIX 中为/bin/sh， 在 Windows 中为cmd.exe， Shell 应当能识别 -c开关在 UNIX 中，或 /s /c 在 Windows 中。 在Windows 中，命令行解析应当能兼容cmd.exe）&lt;br&gt;            timeout，数字，超时时间（默认： 0）&lt;br&gt;            maxBuffer，数字， 在 stdout 或 stderr 中允许存在的最大缓冲（二进制），如果超出那么子进程将会被杀死 （默认: 200&lt;em&gt;1024）&lt;br&gt;            killSignal ，字符串，结束信号（默认：’SIGTERM’）&lt;br&gt;            uid，数字，设置用户进程的 ID&lt;br&gt;            gid，数字，设置进程组的 ID&lt;/em&gt;/&lt;br&gt;        callback//回调函数，包含三个参数error, stdout 和 stderr。&lt;br&gt;      //exec() 方法返回最大的缓冲区，并等待进程结束，一次性返回缓冲区的内容。&lt;br&gt;    /&lt;em&gt;实例&lt;/em&gt;/&lt;br&gt;      //让我们创建两个 js 文件 support.js 和 master.js。&lt;br&gt;        //support.js 文件代码：&lt;br&gt;          console.log(“进程 “ + process.argv[2] + “ 执行。” );&lt;br&gt;        //master.js 文件代码：&lt;br&gt;          const fs = require(‘fs’);&lt;br&gt;          const child_process = require(‘child_process’);&lt;br&gt;          for (var i = 0; i &amp;lt; 3; i++) {&lt;br&gt;            var workerProcess = child_process.exec(‘node support.js’ + i, function (error, stdout, stderr){&lt;br&gt;              if (error) {&lt;br&gt;                console.log(error.stack);&lt;br&gt;                console.log(‘Error code: ‘ + error.code);&lt;br&gt;                console.log(‘Signal received: ‘ + error.signal);&lt;br&gt;              }&lt;br&gt;              console.log(‘stdout: ‘ + stdout);&lt;br&gt;              console.log(‘stderr: ‘ + stderr);&lt;br&gt;            });&lt;br&gt;            workerProcess.on(‘exit’, function (code){&lt;br&gt;              console.log(‘子进程已退出，退出码 ‘ + code);&lt;br&gt;            });&lt;br&gt;          };&lt;br&gt;        //执行以上代码，结果如下所示：&lt;br&gt;          node master.js&lt;br&gt;          子进程已退出，退出码 0&lt;br&gt;          stdout: 进程 1 执行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      stderr: 
      子进程已退出，退出码 0
      stdout: 进程 0 执行。

      stderr: 
      子进程已退出，退出码 0
      stdout: 进程 2 执行。

      stderr: 
/*spawn() 方法*/
  //child_process.spawn 使用指定的命令行参数创建新线程，语法格式如下：
    child_process.spawn(command[, args][, options])
  //参数说明如下：
    command //将要运行的命令
    args // Array 字符串参数数组
    options //Object
      /*cwd String 子进程的当前工作目录
        env Object 环境变量键值对
        stdio Array|String 子进程的 stdio 配置
        detached Boolean 这个子进程将会变成进程组的领导
        uid Number 设置用户进程的 ID
        gid Number 设置进程组的 ID*/
  //spawn() 方法返回流 (stdout &amp;amp; stderr)，在进程返回大量数据时使用。进程一旦开始执行时 spawn() 就开始接收响应。
/*实例*/
  //让我们创建两个 js 文件 support.js 和 master.js。
    //support.js 文件代码：
      console.log(&amp;quot;进程 &amp;quot; + process.argv[2] + &amp;quot; 执行。&amp;quot; );
    //master.js 文件代码：
      const fs = require(&amp;apos;fs&amp;apos;);
      const child_process = require(&amp;apos;child_process&amp;apos;);
      for (var i = 0; i &amp;lt; 3; i++) {
        var workerProcess = child_process.spawn(&amp;apos;node&amp;apos;, [&amp;apos;support.js&amp;apos;, i]);
        workerProcess.stdout.on(&amp;apos;data&amp;apos;, function (data){
          console.log(&amp;apos;stdout: &amp;apos; + data);
        });
        workerProcess.stderr.on(&amp;apos;data&amp;apos;, function (data){
          console.log(&amp;apos;stderr: &amp;apos; + data);
        }); 
        workerProcess.on(&amp;apos;close&amp;apos;, function (data){
          console.log(&amp;apos;子进程已退出，退出码&amp;apos; + code);
        });         
      };
    //执行以上代码，输出结果为：
      node master.js stdout: 进程 0 执行。

      子进程已退出，退出码 0
      stdout: 进程 1 执行。

      子进程已退出，退出码 0
      stdout: 进程 2 执行。

      子进程已退出，退出码 0
/*fork 方法*/
  //child_process.fork 是 spawn() 方法的特殊形式，用于创建进程，语法格式如下：
    child_process.fork(modulePath[, args][, options])
  //参数说明如下：
    modulePath//String，将要在子进程中运行的模块
    args// Array 字符串参数数组
    options//Object
      /*cwd String 子进程的当前工作目录
        env Object 环境变量键值对
        execPath String 创建子进程的可执行文件
        execArgv Array 子进程的可执行文件的字符串参数数组（默认： process.execArgv）
        silent Boolean 如果为true，子进程的stdin，stdout和stderr将会被关联至父进程，否则，它们将会从父进程中继承。（默认为：false）
        uid Number 设置用户进程的 ID
        gid Number 设置进程组的 ID*/
  //返回的对象除了拥有ChildProcess实例的所有方法，还有一个内建的通信信道。
/*实例*/
  //让我们创建两个 js 文件 support.js 和 master.js。
    //support.js文件，代码如下：
      console.log(&amp;quot;进程&amp;quot; + process.argv[2] + &amp;quot;执行。&amp;quot;);
    //master.js文件，代码如下：
      const fs = require(&amp;apos;fs&amp;apos;);
      const child_process = require(&amp;apos;child_process&amp;apos;);
      for (var i = 0; i &amp;lt; 3; i++) {
        var worker_process = child_process.fork(&amp;quot;support.js&amp;quot;, [i]);
        worker_process.on(&amp;apos;close&amp;apos;, function (code){
          console.log(&amp;apos;子进程已退出，退出码&amp;apos; + code);
        });
      };
    //执行以上代码，输出结果为：
      node master.js 
      进程 0 执行。
      子进程已退出，退出码 0
      进程 1 执行。
      子进程已退出，退出码 0
      进程 2 执行。
      子进程已退出，退出码 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;/18、Node.js JXcore 打包&lt;em&gt;/&lt;br&gt;    //JXcore 是一个支持多线程的 Node.js 发行版本，基本不需要对你现有的代码做任何改动就可以直接线程安全地以多线程运行。但我们这篇文章主要是要教大家介绍 JXcore 的打包功能。&lt;br&gt;    /&lt;/em&gt;JXcore 安装&lt;em&gt;/&lt;br&gt;      //下载 JXcore 安装包，并解压，在解压的的目录下提供了 jx 二进制文件命令，接下来我们主要使用这个命令。&lt;br&gt;      //步骤1、下载&lt;br&gt;        //下载 JXcore 安装包 &lt;a href=&quot;http://jxcore.com/downloads/，你需要根据你自己的系统环境来下载安装包。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jxcore.com/downloads/，你需要根据你自己的系统环境来下载安装包。&lt;/a&gt;&lt;br&gt;        //2、Linux/OSX 下载安装命令，直接下载解压包下的 jx 二进制文件拷贝到 /usr/bin 目录下：&lt;br&gt;          $ wget &lt;a href=&quot;https://s3.amazonaws.com/nodejx/jx_rh64.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://s3.amazonaws.com/nodejx/jx_rh64.zip&lt;/a&gt;&lt;br&gt;          $ unzip jx_rh64.zip&lt;br&gt;          $ cp jx_rh64/jx /usr/bin&lt;br&gt;        //将 /usr/bin 添加到 PATH 路径中：&lt;br&gt;          $ export PATH=$PATH:/usr/bin&lt;br&gt;        //以上步骤如果操作正确，使用以下命令，会输出版本号信息：&lt;br&gt;          $ jx –version&lt;br&gt;          v0.10.32&lt;br&gt;    /&lt;/em&gt;包代码&lt;em&gt;/&lt;br&gt;      //例如，我们的 Node.js 项目包含以下几个文件，其中 index.js 是主文件：&lt;br&gt;        drwxr-xr-x  2 root root  4096 Nov 13 12:42 images&lt;br&gt;        -rwxr-xr-x  1 root root 30457 Mar  6 12:19 index.htm&lt;br&gt;        -rwxr-xr-x  1 root root 30452 Mar  1 12:54 index.js&lt;br&gt;        drwxr-xr-x 23 root root  4096 Jan 15 03:48 node_modules&lt;br&gt;        drwxr-xr-x  2 root root  4096 Mar 21 06:10 scripts&lt;br&gt;        drwxr-xr-x  2 root root  4096 Feb 15 11:56 style&lt;br&gt;      //接下来我们使用 jx 命令打包以上项目，并指定 index.js 为 Node.js 项目的主文件：&lt;br&gt;        $ jx package index.js index&lt;br&gt;      //以上命令执行成功，会生成以下两个文件：&lt;br&gt;        index.jxp //这是一个中间件文件，包含了需要编译的完整项目信息。&lt;br&gt;        index.jx  //这是一个完整包信息的二进制文件，可运行在客户端上。&lt;br&gt;    /&lt;/em&gt;载入 JX 文件*/&lt;br&gt;      //我们使用 jx 命令打包项目：&lt;br&gt;        $ node index.js command_line_arguments&lt;br&gt;      //使用 JXcore 编译后，我们可以使用以下命令来执行生成的 jx 二进制文件：&lt;br&gt;        $ jx index.jx command_line_arguments&lt;br&gt;      //更多 JXcore 功能特性你可以参考官网：&lt;a href=&quot;http://jxcore.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jxcore.com/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、Node-js创建第一个应用&quot;&gt;&lt;a href=&quot;#1、Node-js创建第一个应用&quot; class=&quot;headerlink&quot; title=&quot;1、Node.js创建第一个应用&quot;&gt;&lt;/a&gt;1、Node.js创建第一个应用&lt;/h3&gt;&lt;h4 id=&quot;1-1、创建服务器
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo博客优化——站内搜索、版权、IE8兼容</title>
    <link href="http://chaooo.github.io/2016/05/25/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96--%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2%E3%80%81%E7%89%88%E6%9D%83%E3%80%81IE8%E5%85%BC%E5%AE%B9.html"/>
    <id>http://chaooo.github.io/2016/05/25/Hexo博客优化--站内搜索、版权、IE8兼容.html</id>
    <published>2016-05-25T02:03:15.000Z</published>
    <updated>2016-05-30T04:47:38.893Z</updated>
    
    <content type="html">&lt;h3 id=&quot;1-添加Hexo的swiftype站内搜索&quot;&gt;&lt;a href=&quot;#1-添加Hexo的swiftype站内搜索&quot; class=&quot;headerlink&quot; title=&quot;1.添加Hexo的swiftype站内搜索&quot;&gt;&lt;/a&gt;1.添加Hexo的swiftype站内搜索&lt;/h3&gt;&lt;p&gt;先去&lt;a href=&quot;https://swiftype.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swiftype官网&lt;/a&gt;注册一个账号,然后根据指引建立好自己网站对应的索引。&lt;br&gt;步骤：&lt;br&gt;     &lt;code&gt;Create an engine&lt;/code&gt;&lt;br&gt;—&amp;gt; &lt;code&gt;Create a search engine &amp;gt;(standard web crawler)&lt;/code&gt;&lt;br&gt;—&amp;gt; &lt;code&gt;WEBSITE URL&lt;/code&gt;下填写你的网站地址：如：&lt;a href=&quot;http://chaooo.github.io&quot;&gt;http://chaooo.github.io&lt;/a&gt;&lt;br&gt;—&amp;gt; &lt;code&gt;ENGINE NAME&lt;/code&gt;自己取一个名字：如：chaooo&lt;br&gt;—&amp;gt; 然后他开始抓取你网站的数据。&lt;br&gt;—&amp;gt; 完成后，可以点击&lt;code&gt;Content&lt;/code&gt;去看看抓了些什么数据，然后可以自己删除不想要的数据。（可选）&lt;br&gt;—&amp;gt; 点击&lt;code&gt;Install Search&lt;/code&gt;复制里面的代码：&lt;/p&gt;
&lt;p&gt;然后在&lt;code&gt;themes\landscape\layout\_partial\after-footer.ejs&lt;/code&gt;在最后加上刚复制的代码：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;w,d,t,u,n,s,e&lt;/span&gt;)&lt;/span&gt;&amp;#123;w[&lt;span class=&quot;string&quot;&gt;&#39;SwiftypeObject&#39;&lt;/span&gt;]=n;w[n]=w[n]||&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (w[n].q=w[n].q||[]).push(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);&amp;#125;;s=d.createElement(t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e=d.getElementsByTagName(t)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];s.async=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;s.src=u;e.parentNode.insertBefore(s,e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;//s.swiftypecdn.com/install/v2/st.js&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;_st&#39;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _st(&lt;span class=&quot;string&quot;&gt;&#39;install&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Hvy4-e-Ew4x8PR6Let84&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;2.0.0&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在&lt;code&gt;themes\landscape\_config.yml&lt;/code&gt;末尾添加如下代码：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;swift_search:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后到&lt;code&gt;themes\landscape\layout\_partial\header.ejs&lt;/code&gt;中找到：&lt;code&gt;&amp;lt;div id=&amp;quot;search-form-wrap&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;&lt;/code&gt;刪除里面的內容，插入如下代码：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;search-form-wrap&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;get&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;accept-charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;search-form&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;autocapitalize&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;off&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;autocorrect&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;off&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;autocomplete&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;off&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;q&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;results&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;search&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;maxlength&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;20&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;placeholder&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Search&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;border:none;background:none;width:161px;height:30px;line-height:30px;padding:0px 11px 0px 28px;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;st-default-search-input search-form-input&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;search-form-submit&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后到&lt;code&gt;themes\landscape\source\css\_partial\header.styl&lt;/code&gt;找到&lt;code&gt;#search-form-wrap&lt;/code&gt;对其样式微调，大概在118行，修改后的值：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#search-form-wrap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;absolute&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;top&lt;/span&gt;: 14&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;width&lt;/span&gt;: 200&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;height&lt;/span&gt;: 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;right&lt;/span&gt;: 35&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;opacity&lt;/span&gt;: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;visibility&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;hidden&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;transition&lt;/span&gt;: 0&lt;span class=&quot;selector-class&quot;&gt;.2s&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;ease-out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;scale&lt;/span&gt;(&lt;span class=&quot;selector-class&quot;&gt;.5&lt;/span&gt;) &lt;span class=&quot;selector-tag&quot;&gt;translate&lt;/span&gt;(94&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;, 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;amp;&lt;span class=&quot;selector-class&quot;&gt;.on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;opacity&lt;/span&gt;: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;visibility&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;visible&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;scale&lt;/span&gt;(1) &lt;span class=&quot;selector-tag&quot;&gt;translate&lt;/span&gt;(0, 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; mq-mobile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: &lt;span class=&quot;number&quot;&gt;80%&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    right: -&lt;span class=&quot;number&quot;&gt;80%&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后到&lt;code&gt;themes\landscape\source\css\_partial\header.styl&lt;/code&gt;找到&lt;code&gt;.nav-icon&lt;/code&gt;，大概在81行，在其后面添加(z-index: 1)：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.nav-icon&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @&lt;span class=&quot;keyword&quot;&gt;extend&lt;/span&gt; $nav-link&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  font-family: font-icon&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  text-align: center&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  font-size: font-size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  width: font-size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  height: font-size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  padding: &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15px&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  position: relative&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cursor: pointer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  z-index: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意：在使用中我发现swiftype搜索框在IE和火狐浏览器根本不能唤醒搜狗输入法的中文输入，必须要先输入一个英文字母才能输入中文，我在swiftype官网测试的swiftype搜索框也一样。（我分别测试了Chrome–v49，Firefox Developer Edition–v47，IE11/IE10/IE9,结果只有Chrome能唤起搜狗中文。）&lt;/p&gt;
&lt;h3 id=&quot;2-页尾版权信息修改&quot;&gt;&lt;a href=&quot;#2-页尾版权信息修改&quot; class=&quot;headerlink&quot; title=&quot;2. 页尾版权信息修改&quot;&gt;&lt;/a&gt;2. 页尾版权信息修改&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;themes\landscape\layout\_partial\footer.ejs&lt;/code&gt;中，第6行开始，修改其为居中对齐，添加网站地图、订阅、联系博主链接：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;footer-info&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;inner&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text-align:center;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Copyright &amp;amp;copy; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;attr&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;Date&lt;/span&gt;(), &#39;&lt;span class=&quot;attr&quot;&gt;YYYY&lt;/span&gt;&#39;) %&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;config.author&lt;/span&gt; || &lt;span class=&quot;attr&quot;&gt;config.title&lt;/span&gt; %&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;__&lt;/span&gt;(&#39;&lt;span class=&quot;attr&quot;&gt;powered_by&lt;/span&gt;&#39;) %&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://hexo.io/&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;target&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;_blank&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Hexo&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/baidusitemap.xml&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;网站地图&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;amp;nbsp; &amp;amp;nbsp;|&amp;amp;nbsp; &amp;amp;nbsp;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/atom.xml&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;订阅本站&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;amp;nbsp; &amp;amp;nbsp;|&amp;amp;nbsp; &amp;amp;nbsp;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;mailto:zhenggchaoo@gmail.com&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;target&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;_blank&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;联系博主&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-对于低版本IE布局微调&quot;&gt;&lt;a href=&quot;#3-对于低版本IE布局微调&quot; class=&quot;headerlink&quot; title=&quot;3. 对于低版本IE布局微调&quot;&gt;&lt;/a&gt;3. 对于低版本IE布局微调&lt;/h3&gt;&lt;h4 id=&quot;3-1-加入低版本IE浏览器提醒&quot;&gt;&lt;a href=&quot;#3-1-加入低版本IE浏览器提醒&quot; class=&quot;headerlink&quot; title=&quot;3.1 加入低版本IE浏览器提醒&quot;&gt;&lt;/a&gt;3.1 加入低版本IE浏览器提醒&lt;/h4&gt;&lt;p&gt;Hexo主题大多都只完美支持IE9及以上版本的浏览器，低版本IE会影响网站体验，所以要提示浏览者及时更换现代浏览器，在&lt;code&gt;themes\landscape\layout\_partial\header.ejs&lt;/code&gt;中找到&lt;code&gt;&amp;lt;div id=&amp;quot;header-outer&amp;quot; class=&amp;quot;outer&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;以其为父元素添加：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--[if lt IE 9]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;style&amp;gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .hid-ltIE9&amp;#123;position:absolute;bottom:0;z-index:999;width:100%;line-height:46px;color:#7b1a00;font-size:14px;text-align:center;background:#fff3c8;border-radius:4px;border:1px solid #;text-shadow:0 1px #fff;-webkit-box-shadow:0 -1px 4px #ccc inset;box-shadow:0 -1px 4px #ccc inset;border:1px solid #ccc;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .hid-ltIE9 a&amp;#123;color:#258fb8;text-decoration:none;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .hid-ltIE9 a:hover&amp;#123;text-decoration:underline;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .hid-exclamation-triangle,.hid-chrome,.hid-firefox&amp;#123;font:normal normal normal 14px/1 FontAwesome;display:inline-block;width:30px;height:30px;font-size:14px;text-align:center;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .hid-exclamation-triangle:before&amp;#123;content:&quot;\f071&quot;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .hid-chrome:before&amp;#123;content:&quot;\f268&quot;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .hid-firefox:before&amp;#123;content:&quot;\f269&quot;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;p class=&quot;hid-ltIE9&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;i class=&quot;hid-exclamation-triangle&quot; aria-hidden=&quot;true&quot;&amp;gt;&amp;lt;/i&amp;gt;重要提示：您当前使用的浏览器版本过低，可能存在安全风险！想要更好的体验，建议升级浏览器：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;a href=&quot;https://www.google.cn/intl/zh-CN/chrome/browser/desktop/&quot; title=&quot;谷歌Chrome浏览器&quot;&amp;gt;&amp;lt;i class=&quot;hid-chrome&quot; aria-hidden=&quot;true&quot;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Chrome&amp;lt;/a&amp;gt;、&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;a href=&quot;http://www.firefox.com.cn/download/&quot;title=&quot;火狐Firefox浏览器&quot;&amp;gt;&amp;lt;i class=&quot;hid-firefox&quot; aria-hidden=&quot;true&quot;&amp;gt;&amp;lt;/i&amp;gt;Firefox&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;![endif]--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样，现代浏览器都不会解析这段代码，直到IE8及其版本的浏览器才会显示。&lt;/p&gt;
&lt;h4 id=&quot;3-2-对于旧IE-header与footer布局微调&quot;&gt;&lt;a href=&quot;#3-2-对于旧IE-header与footer布局微调&quot; class=&quot;headerlink&quot; title=&quot;3.2 (对于旧IE)header与footer布局微调&quot;&gt;&lt;/a&gt;3.2 (对于旧IE)header与footer布局微调&lt;/h4&gt;&lt;p&gt;发现博客在IE8及其版本的浏览器显示很多样式都乱掉了，特别是头部header，毕竟还有不少人用的低版本浏览器，平常工作中也要求做到兼容到IE8，所以这里只做稍微调。&lt;br&gt;在&lt;code&gt;themes\landscape\layout\_partial\header.ejs&lt;/code&gt;中，把&lt;code&gt;&amp;lt;header id=&amp;quot;header&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;用下面的代码包起来：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--[if lt IE 9]&amp;gt;&amp;lt;div id=&quot;header&quot;&amp;gt;&amp;lt;![endif]--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;header&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //....其他代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--[if lt IE 9]&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;![endif]--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;themes\landscape\layout\_partial\footer.ejs&lt;/code&gt;中，把&lt;code&gt;&amp;lt;header id=&amp;quot;footer&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;用下面的代码包起来：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--[if lt IE 9]&amp;gt;&amp;lt;div id=&quot;footer&quot;&amp;gt;&amp;lt;![endif]--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;footer&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //....其他代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--[if lt IE 9]&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;![endif]--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;虽然这样调整并不高明，但能使其在IE8下显示效果大体上还能接受。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-添加Hexo的swiftype站内搜索&quot;&gt;&lt;a href=&quot;#1-添加Hexo的swiftype站内搜索&quot; class=&quot;headerlink&quot; title=&quot;1.添加Hexo的swiftype站内搜索&quot;&gt;&lt;/a&gt;1.添加Hexo的swiftype站内搜索&lt;/h3&gt;&lt;p&gt;先去&lt;a href=&quot;https://swiftype.com&quot;&gt;swiftype官网&lt;/a&gt;注册一个账号,然后根据指引建立好自己网站对应的索引。&lt;br&gt;步骤：&lt;br&gt;     &lt;code&gt;Create an engine&lt;/code&gt;&lt;br&gt;—&amp;gt; &lt;code&gt;Create a search engine &amp;gt;(standard web crawler)&lt;/code&gt;&lt;br&gt;—&amp;gt; &lt;code&gt;WEBSITE URL&lt;/code&gt;下填写你的网站地址：如：&lt;a href=&quot;http://chaooo.github.io&quot;&gt;http://chaooo.github.io&lt;/a&gt;&lt;br&gt;—&amp;gt; &lt;code&gt;ENGINE NAME&lt;/code&gt;自己取一个名字：如：chaooo&lt;br&gt;—&amp;gt; 然后他开始抓取你网站的数据。&lt;br&gt;—&amp;gt; 完成后，可以点击&lt;code&gt;Content&lt;/code&gt;去看看抓了些什么数据，然后可以自己删除不想要的数据。（可选）&lt;br&gt;—&amp;gt; 点击&lt;code&gt;Install Search&lt;/code&gt;复制里面的代码：&lt;/p&gt;
&lt;p&gt;然后在&lt;code&gt;themes\landscape\layout\_partial\after-footer.ejs&lt;/code&gt;在最后加上刚复制的代码：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;w,d,t,u,n,s,e&lt;/span&gt;)&lt;/span&gt;&amp;#123;w[&lt;span class=&quot;string&quot;&gt;&#39;SwiftypeObject&#39;&lt;/span&gt;]=n;w[n]=w[n]||&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (w[n].q=w[n].q||[]).push(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);&amp;#125;;s=d.createElement(t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e=d.getElementsByTagName(t)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];s.async=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;s.src=u;e.parentNode.insertBefore(s,e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;//s.swiftypecdn.com/install/v2/st.js&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;_st&#39;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _st(&lt;span class=&quot;string&quot;&gt;&#39;install&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Hvy4-e-Ew4x8PR6Let84&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;2.0.0&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo博客优化——库、字体、收录、统计</title>
    <link href="http://chaooo.github.io/2016/05/24/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96--%E5%BA%93%E3%80%81%E5%AD%97%E4%BD%93%E3%80%81%E6%94%B6%E5%BD%95%E3%80%81%E7%BB%9F%E8%AE%A1.html"/>
    <id>http://chaooo.github.io/2016/05/24/Hexo博客优化--库、字体、收录、统计.html</id>
    <published>2016-05-24T03:22:56.000Z</published>
    <updated>2016-05-26T01:21:44.746Z</updated>
    
    <content type="html">&lt;h3 id=&quot;1-jQuery-库的优化&quot;&gt;&lt;a href=&quot;#1-jQuery-库的优化&quot; class=&quot;headerlink&quot; title=&quot;1. jQuery 库的优化&quot;&gt;&lt;/a&gt;1. jQuery 库的优化&lt;/h3&gt;&lt;p&gt;landscape默认是使用Google jQuery 库，但在国内速度不是很理想，这里把它换成新浪的，在&lt;code&gt;themes\landscape\layout\_partial\after-footer.ejs&lt;/code&gt;17行：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;替换为如下代码：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;http://lib.sinaapp.com/js/jquery/2.0.3/jquery-2.0.3.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&amp;lt;![CDATA[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (typeof jQuery == &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  document.write(unescape(&lt;span class=&quot;string&quot;&gt;&quot;%3Cscript src=&#39;/js/jquery-2.0.3.min.js&#39; type=&#39;text/javascript&#39;%3E%3C/script%3E&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// ]]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里不但将 Google 的 jQuery 替换成了 SAE 的，随后还进行了一个判断，如果获取新浪的 jQuery 失败，则使用本网站自己的 jQuery。为了让这段代码有效，我们要去 jQuery 官方下载合适版本的 jQuery 并将其放到 &lt;code&gt;themes/landscape/source/js/&lt;/code&gt;目录下，命名为 &lt;code&gt;jquery-2.0.3.min.js&lt;/code&gt;。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;还有一点需要特别注意，那就是 jQuery 这个文件在 hexo 生成博客时会被解析，因此一定要将 jQuery 文件开头处的 //@ sourceMappingURL=jquery-2.0.3.min.map 这一行代码删去，否则会导致博客无法生成。&lt;/p&gt;
&lt;h3 id=&quot;2-字体优化&quot;&gt;&lt;a href=&quot;#2-字体优化&quot; class=&quot;headerlink&quot; title=&quot;2. 字体优化&quot;&gt;&lt;/a&gt;2. 字体优化&lt;/h3&gt;&lt;h4 id=&quot;2-1跨平台字体优化&quot;&gt;&lt;a href=&quot;#2-1跨平台字体优化&quot; class=&quot;headerlink&quot; title=&quot;2.1跨平台字体优化&quot;&gt;&lt;/a&gt;2.1跨平台字体优化&lt;/h4&gt;&lt;p&gt;为了能在各个平台上都显示令人满意的字体，我们要修改CSS文件中的字体设置，列出多个备选的字体，操作系统会依次尝试，使用系统中已安装的字体。我们要修改的是&lt;code&gt;themes/landscape/source/css/_variables.styl&lt;/code&gt;这一文件，将其中第22行:&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;font-sans = &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;改成如下内容：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;font-sans = Tahoma, &lt;span class=&quot;string&quot;&gt;&quot;Helvetica Neue&quot;&lt;/span&gt;, Helvetica, &lt;span class=&quot;string&quot;&gt;&quot;Hiragino Sans GB&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Microsoft YaHei Light&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Microsoft YaHei&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Source Han Sans CN&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;WenQuanYi Micro Hei&quot;&lt;/span&gt;, Arial, sans-serif&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中海维提卡（Helvetica）、Arial是英文字体，前者一般存在于苹果电脑和移动设备上，后者一般存在于Windows系统中。冬青黑体（Hiragino Sans GB）、思源黑体（Source Han Sans CN）、文泉驿米黑（WenQuanYi Micro Hei）是中文字体，冬青黑体从OS X 10.6开始集成在苹果系统中，文泉驿米黑在Linux的各大发行版中均较为常见，而思源黑体是近期Google和Adobe合作推出的一款开源字体，很多电脑上也安装了这一字体。这样一来，在绝大部分操作系统中就可以显示美观的字体了。&lt;/p&gt;
&lt;h4 id=&quot;2-2代码等宽字体优化&quot;&gt;&lt;a href=&quot;#2-2代码等宽字体优化&quot; class=&quot;headerlink&quot; title=&quot;2.2代码等宽字体优化&quot;&gt;&lt;/a&gt;2.2代码等宽字体优化&lt;/h4&gt;&lt;p&gt;Hexo默认的等宽字体是Google的Source Code Pro，这里把它换成360的，在&lt;code&gt;themes/landscape/layout\_partial\head.ejs&lt;/code&gt; 第31行:&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;//fonts.googleapis.com/css?family=Source+Code+Pro&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;改成如下内容：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://fonts.useso.com/css?family=Source+Code+Pro&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-hexo提交搜索引擎（百度-谷歌）&quot;&gt;&lt;a href=&quot;#3-hexo提交搜索引擎（百度-谷歌）&quot; class=&quot;headerlink&quot; title=&quot;3. hexo提交搜索引擎（百度+谷歌）&quot;&gt;&lt;/a&gt;3. hexo提交搜索引擎（百度+谷歌）&lt;/h3&gt;&lt;h4 id=&quot;3-1-确认博客是否被收录&quot;&gt;&lt;a href=&quot;#3-1-确认博客是否被收录&quot; class=&quot;headerlink&quot; title=&quot;3.1 确认博客是否被收录&quot;&gt;&lt;/a&gt;3.1 确认博客是否被收录&lt;/h4&gt;&lt;p&gt;在百度或者谷歌上面输入下面格式来判断，如果能搜索到就说明被收录，否则就没有，用你的域名替代我的http:chaooo.github.io&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;site:chaooo.github.io&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-2-验证网站&quot;&gt;&lt;a href=&quot;#3-2-验证网站&quot; class=&quot;headerlink&quot; title=&quot;3.2 验证网站&quot;&gt;&lt;/a&gt;3.2 验证网站&lt;/h4&gt;&lt;p&gt;两个搜索引擎入口：&lt;br&gt;&lt;a href=&quot;https://www.google.com/webmasters/tools/home?hl=zh-CN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google搜索引擎提交入口&lt;/a&gt;、&lt;a href=&quot;http://zhanzhang.baidu.com/linksubmit/url&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度搜索引擎入口&lt;/a&gt;。&lt;br&gt;不管谷歌还是百度都要先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的&lt;code&gt;source/&lt;/code&gt;下面 。&lt;br&gt;然后部署到服务器,输入地址：&lt;code&gt;http://chaooo.github.io/google4cc3eef6ff5975bf.html&lt;/code&gt;和&lt;code&gt;http://chaooo.github.io/baidu_verify_wjJ25Q3cv2.html&lt;/code&gt;能访问到就可以点验证按钮(按照谷歌或百度的引导步骤就好)。&lt;br&gt;注意：若出现验证失败，则是因为hexo编译文件时，会给下载的HTML文件中添加其他的内容，导致验证失败。&lt;br&gt;则需要在Github里手动修改验证HTML文件，或者不编译。&lt;br&gt;我的做法是，删除根目录&lt;code&gt;source/&lt;/code&gt;下面刚拷贝的两个文件，和编译后生成的&lt;code&gt;public/&lt;/code&gt;下的两个同名文件（若细心会注意到&lt;code&gt;source/&lt;/code&gt;和&lt;code&gt;public/&lt;/code&gt;下的两个同名文件大小不一样）。&lt;br&gt;然后重新执行：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo generate &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在重新验证就通过了。&lt;/p&gt;
&lt;h4 id=&quot;3-3-安装-RSS-订阅-和-sitemap-网站地图-插件&quot;&gt;&lt;a href=&quot;#3-3-安装-RSS-订阅-和-sitemap-网站地图-插件&quot; class=&quot;headerlink&quot; title=&quot;3.3 安装 RSS(订阅) 和 sitemap(网站地图) 插件&quot;&gt;&lt;/a&gt;3.3 安装 RSS(订阅) 和 sitemap(网站地图) 插件&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install hexo-generator-feed --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm install hexo-generator-sitemap --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm install hexo-generator-baidu-sitemap --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改 hexo_config.yml 站点配置，添加：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Extensions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Plugins:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  hexo-generator-feed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  hexo-generator-sitemap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  hexo-generator-baidu-sitemap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Feed Atom&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;feed:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;: atom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  path: atom.xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;limit&lt;/span&gt;: 20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#sitemap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sitemap:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  path: sitemap.xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baidusitemap:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  path: baidusitemap.xml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;部署后,访问 &lt;code&gt;chaooo.github.io/sitemap.xml&lt;/code&gt; 和 &lt;code&gt;chaooo.github.io/baidusitemap.xml&lt;/code&gt;,就能看到有内容且第一行为:&lt;code&gt;该 XML 文件并未包含任何关联的样式信息。文档树显示如下。&lt;/code&gt;,就说明成功了。&lt;br&gt;RSS 也差不多，访问 &lt;code&gt;chaooo.github.io/atom.xml&lt;/code&gt; ，能看到订阅信息。&lt;br&gt;注意：把&lt;code&gt;chaooo.github.io&lt;/code&gt;换成你自己的个人域名（订阅是顺带安装的，也可以后在安装）。&lt;/p&gt;
&lt;h4 id=&quot;3-4-让谷歌收录我们的博客&quot;&gt;&lt;a href=&quot;#3-4-让谷歌收录我们的博客&quot; class=&quot;headerlink&quot; title=&quot;3.4 让谷歌收录我们的博客&quot;&gt;&lt;/a&gt;3.4 让谷歌收录我们的博客&lt;/h4&gt;&lt;p&gt;谷歌操作比较简单，就是向&lt;a href=&quot;https://www.google.com/webmasters/tools/home?hl=zh-CN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google站长工具&lt;/a&gt;提交sitemap。&lt;br&gt;登录Google账号，添加了站点验证通过后，选择站点，之后在&lt;code&gt;抓取——站点地图&lt;/code&gt;中就能看到&lt;code&gt;添加/测试站点地图&lt;/code&gt;,然后输入&lt;code&gt;sitemap.xml&lt;/code&gt;点击提交。&lt;/p&gt;
&lt;h4 id=&quot;3-5-让百度收录我们的博客&quot;&gt;&lt;a href=&quot;#3-5-让百度收录我们的博客&quot; class=&quot;headerlink&quot; title=&quot;3.5 让百度收录我们的博客&quot;&gt;&lt;/a&gt;3.5 让百度收录我们的博客&lt;/h4&gt;&lt;p&gt;正常情况，是要等百度爬虫来爬到你的网站，才会被收录。&lt;br&gt;但是github屏蔽了百度爬虫目前，所以我们要主动出击，我们自己把网站提交给百度。&lt;br&gt;这就要使用到&lt;a href=&quot;http://zhanzhang.baidu.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度站长平台&lt;/a&gt;。&lt;br&gt;1.进入站点管理，找到&lt;code&gt;网页抓取——链接提交——详情&lt;/code&gt;点进去。&lt;br&gt;一般主动提交比手动提交效果好，这里介绍主动提交的两种简单的方法&lt;/p&gt;
&lt;h5 id=&quot;3-5-1-sitemap提交&quot;&gt;&lt;a href=&quot;#3-5-1-sitemap提交&quot; class=&quot;headerlink&quot; title=&quot;3.5.1 sitemap提交&quot;&gt;&lt;/a&gt;3.5.1 sitemap提交&lt;/h5&gt;&lt;p&gt;直接点击&lt;code&gt;sitemap&lt;/code&gt;填写数据文件地址：&lt;code&gt;chaooo.github.io/baidusitemap.xml&lt;/code&gt;,输入验证码提交。&lt;/p&gt;
&lt;h5 id=&quot;3-5-2-自动推送&quot;&gt;&lt;a href=&quot;#3-5-2-自动推送&quot; class=&quot;headerlink&quot; title=&quot;3.5.2 自动推送&quot;&gt;&lt;/a&gt;3.5.2 自动推送&lt;/h5&gt;&lt;p&gt;自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度，可将代码添加到&lt;code&gt;\themes\landscape\layout\_partial\after_footer.ejs&lt;/code&gt;中的最下面就行。&lt;br&gt;代码如下：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bp = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; curProtocol = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.location.protocol.split(&lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (curProtocol === &lt;span class=&quot;string&quot;&gt;&#39;https&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bp.src = &lt;span class=&quot;string&quot;&gt;&#39;https://zz.bdstatic.com/linksubmit/push.js&#39;&lt;/span&gt;;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bp.src = &lt;span class=&quot;string&quot;&gt;&#39;http://push.zhanzhang.baidu.com/push.js&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&quot;script&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s.parentNode.insertBefore(bp, s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tengj.top/2016/03/14/baidunoshouluresson/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度链接提交主动推送后不收录的原因&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-开启谷歌统计-google-analysis&quot;&gt;&lt;a href=&quot;#4-开启谷歌统计-google-analysis&quot; class=&quot;headerlink&quot; title=&quot;4. 开启谷歌统计(google analysis)&quot;&gt;&lt;/a&gt;4. 开启谷歌统计(google analysis)&lt;/h3&gt;&lt;p&gt;先到&lt;a href=&quot;https://analytics.google.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;google analysis&lt;/a&gt;注册服务，注册时，需要正确填写 网站的URL。注册成功后，会得到一个跟踪ID，以及一段跟踪代码。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 跟踪 ID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// UA-58387143-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;i,s,o,g,r,a,m&lt;/span&gt;)&lt;/span&gt;&amp;#123;i[&lt;span class=&quot;string&quot;&gt;&#39;GoogleAnalyticsObject&#39;&lt;/span&gt;]=r;i[r]=i[r]||&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (i[r].q=i[r].q||[]).push(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;)&amp;#125;,i[r].l=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;*&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();a=s.createElement(o),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  m=s.getElementsByTagName(o)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];a.async=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;a.src=g;m.parentNode.insertBefore(a,m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;https://www.google-analytics.com/analytics.js&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;ga&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ga(&lt;span class=&quot;string&quot;&gt;&#39;create&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;UA-58387143-1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ga(&lt;span class=&quot;string&quot;&gt;&#39;send&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;pageview&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;到&lt;code&gt;\themes\landscape\layout\_config.yml&lt;/code&gt;中,将google analysis打开：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;google_analytics:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  id: UA-58387143-1 &lt;span class=&quot;comment&quot;&gt;#刚注册获取的ID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果设置不起作用，检查在&lt;code&gt;themes\pacman\layout\_partial\&lt;/code&gt;下有没有google_analytics.ejs ，有的话就在&lt;code&gt;\themes\landscape\layout\_partial\head.ejs&lt;/code&gt;的&lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt;之前，添加下面代码试试：&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%- partial(&lt;span class=&quot;string&quot;&gt;&#39;google_analytics&#39;&lt;/span&gt;) %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;若&lt;code&gt;themes\pacman\layout\_partial\&lt;/code&gt;不存在google_analytics.ejs 文件，就手动创建：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;% &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (theme.google_analytics)&amp;#123; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Google Analytics --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;i,s,o,g,r,a,m&lt;/span&gt;)&lt;/span&gt;&amp;#123;i[&lt;span class=&quot;string&quot;&gt;&#39;GoogleAnalyticsObject&#39;&lt;/span&gt;]=r;i[r]=i[r]||&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(i[r].q=i[r].q||[]).push(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;)&amp;#125;,i[r].l=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;*&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();a=s.createElement(o),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m=s.getElementsByTagName(o)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];a.async=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;a.src=g;m.parentNode.insertBefore(a,m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;//www.google-analytics.com/analytics.js&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;ga&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ga(&lt;span class=&quot;string&quot;&gt;&#39;create&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;%= theme.google_analytics %&amp;gt;&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ga(&lt;span class=&quot;string&quot;&gt;&#39;send&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;pageview&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- End Google Analytics --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &amp;#125; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最笨的方法就是删除&lt;code&gt;google_analytics.ejs&lt;/code&gt;和刚在&lt;code&gt;_config.yml&lt;/code&gt;配置google analysis的几行代码，直接从注册来的代码拷贝到&lt;code&gt;\themes\landscape\layout\_partial\head.ejs&lt;/code&gt;的&lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt;之前。&lt;/p&gt;
&lt;h3 id=&quot;5-文章永久链接&quot;&gt;&lt;a href=&quot;#5-文章永久链接&quot; class=&quot;headerlink&quot; title=&quot;5. 文章永久链接&quot;&gt;&lt;/a&gt;5. 文章永久链接&lt;/h3&gt;&lt;p&gt;默认文章链结是以: &lt;code&gt;http://chaooo.github.io/2016/05/24/文章标题/&lt;/code&gt; 的格式，末尾没有.html结尾，有点动态页面的感觉，好像对搜索引擎不太友好，于是可以修改根目录下的 &lt;code&gt;_config.yml&lt;/code&gt; 文件里:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;permalink: :year/:month/:day/:title/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;改为：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;permalink: :year/:month/:day/:title.html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后浏览器访问就是&lt;code&gt;http://chaooo.github.io/2016/05/24/文章标题.html&lt;/code&gt; 的格式了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-jQuery-库的优化&quot;&gt;&lt;a href=&quot;#1-jQuery-库的优化&quot; class=&quot;headerlink&quot; title=&quot;1. jQuery 库的优化&quot;&gt;&lt;/a&gt;1. jQuery 库的优化&lt;/h3&gt;&lt;p&gt;landscape默认是使用Google jQuery 库，但在国内速度不是很理想，这里把它换成新浪的，在&lt;code&gt;themes\landscape\layout\_partial\after-footer.ejs&lt;/code&gt;17行：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;替换为如下代码：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;http://lib.sinaapp.com/js/jquery/2.0.3/jquery-2.0.3.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&amp;lt;![CDATA[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (typeof jQuery == &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  document.write(unescape(&lt;span class=&quot;string&quot;&gt;&quot;%3Cscript src=&#39;/js/jquery-2.0.3.min.js&#39; type=&#39;text/javascript&#39;%3E%3C/script%3E&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// ]]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里不但将 Google 的 jQuery 替换成了 SAE 的，随后还进行了一个判断，如果获取新浪的 jQuery 失败，则使用本网站自己的 jQuery。为了让这段代码有效，我们要去 jQuery 官方下载合适版本的 jQuery 并将其放到 &lt;code&gt;themes/landscape/source/js/&lt;/code&gt;目录下，命名为 &lt;code&gt;jquery-2.0.3.min.js&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://chaooo.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客优化——主题、分享、评论、微博秀</title>
    <link href="http://chaooo.github.io/2016/05/23/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96--%E4%B8%BB%E9%A2%98%E3%80%81%E5%88%86%E4%BA%AB%E3%80%81%E8%AF%84%E8%AE%BA%E3%80%81%E5%BE%AE%E5%8D%9A%E7%A7%80.html"/>
    <id>http://chaooo.github.io/2016/05/23/Hexo博客优化--主题、分享、评论、微博秀.html</id>
    <published>2016-05-23T06:30:13.000Z</published>
    <updated>2016-05-26T01:21:44.733Z</updated>
    
    <content type="html">&lt;p&gt;继上一篇&lt;a href=&quot;Hexo3-2-github搭建静态博客.html&quot;&gt;Hexo3.2+GitHub搭建静态博客&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;1-主题&quot;&gt;&lt;a href=&quot;#1-主题&quot; class=&quot;headerlink&quot; title=&quot;1.主题&quot;&gt;&lt;/a&gt;1.主题&lt;/h3&gt;&lt;p&gt;Hexo提供了很多主题，具体可参见&lt;a href=&quot;https://hexo.io/themes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Themes|Hexo&lt;/a&gt;，这里我选择默认主题&lt;a href=&quot;https://github.com/hexojs/hexo-theme-landscape&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;landscape&lt;/a&gt;(此主题默认已安装)。&lt;/p&gt;
&lt;h4 id=&quot;1-1安装主题&quot;&gt;&lt;a href=&quot;#1-1安装主题&quot; class=&quot;headerlink&quot; title=&quot;1.1安装主题&quot;&gt;&lt;/a&gt;1.1安装主题&lt;/h4&gt;&lt;p&gt;将Git Shell切换到根目录，执行下列命令，将主题下载到themes/spfk目录下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/hexojs/hexo-theme-landscape.git themes/landscape&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;获取landscape主题的最新版本：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; themes/landscape&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git pull&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改在根目录下_config.yml 配置：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;theme: landscape&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-修改添加分享链接&quot;&gt;&lt;a href=&quot;#2-修改添加分享链接&quot; class=&quot;headerlink&quot; title=&quot;2.修改添加分享链接&quot;&gt;&lt;/a&gt;2.修改添加分享链接&lt;/h3&gt;&lt;h4 id=&quot;2-1原生分享的修改&quot;&gt;&lt;a href=&quot;#2-1原生分享的修改&quot; class=&quot;headerlink&quot; title=&quot;2.1原生分享的修改&quot;&gt;&lt;/a&gt;2.1原生分享的修改&lt;/h4&gt;&lt;p&gt;在&lt;code&gt;themes\landscape\source\js\script.js&lt;/code&gt;中，57行 &lt;code&gt;&amp;lt;div class=&amp;quot;article-share-links&amp;quot;&amp;gt;&lt;/code&gt;下面的四个链接就是 Facebook 等社交网站的分享链接。将其替换或添加如下代码，即可实现分享到国内社交网站：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;a href=&quot;http://service.weibo.com/share/share.php?&amp;amp;title=好东西就要一起分享&amp;amp;language=zh_cn&amp;amp;url=&#39;&lt;/span&gt; + encodedUrl + &lt;span class=&quot;string&quot;&gt;&#39;&quot; class=&quot;article-share-sina&quot; target=&quot;_blank&quot; title=&quot;微博&quot;&amp;gt;&amp;lt;/a&amp;gt;&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;a href=&quot;http://share.renren.com/share/buttonshare.do?link=&#39;&lt;/span&gt; + encodedUrl + &lt;span class=&quot;string&quot;&gt;&#39;&quot; class=&quot;article-share-renren&quot; target=&quot;_blank&quot; title=&quot;人人&quot;&amp;gt;&amp;lt;/a&amp;gt;&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;a href=&quot;http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url=&#39;&lt;/span&gt; + encodedUrl + &lt;span class=&quot;string&quot;&gt;&#39;&quot; class=&quot;article-share-qq&quot; target=&quot;_blank&quot; title=&quot;QQ空间&quot;&amp;gt;&amp;lt;/a&amp;gt;&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;a href=&quot;http://qr.liantu.com/api.php?text=&#39;&lt;/span&gt; + encodedUrl + &lt;span class=&quot;string&quot;&gt;&#39;&quot; class=&quot;article-share-wechat&quot; target=&quot;_blank&quot; title=&quot;微信&quot;&amp;gt;&amp;lt;/a&amp;gt;&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同时，还需要替换图标。本主题使用 Font Awesome 来显示图标，但内置的 Font Awesome 版本较旧，无法显示 QQ、微信等图标，所以，需要下载最新版 &lt;a href=&quot;http://fontawesome.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Font Awesome&lt;/a&gt;，替换掉 &lt;code&gt;themes\landscape\source\css\fonts&lt;/code&gt;中相关文件，并在&lt;code&gt;themes\landscape\source\css\_variables.styl&lt;/code&gt;中27行的 &lt;code&gt;font-icon-version&lt;/code&gt; 修改为最新的 Font Awesome 版本号。&lt;/p&gt;
&lt;p&gt;然后，在 &lt;code&gt;themes\landscape\source\css\_partial\article.styl&lt;/code&gt; 中，找到四段以 &lt;code&gt;.article-share-***&lt;/code&gt;开头的代码（273行起），添加如下内容：&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.article-share-sina&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @extend &lt;span class=&quot;variable&quot;&gt;$article&lt;/span&gt;-share-link&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;amp;:before&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;\f18a&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;amp;:hover&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: color-sina&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-shadow&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; darken(color-sina, &lt;span class=&quot;number&quot;&gt;20%&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.article-share-qq&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @extend &lt;span class=&quot;variable&quot;&gt;$article&lt;/span&gt;-share-link&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;amp;:before&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;\f1d6&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;amp;:hover&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: color-qq&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-shadow&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; darken(color-qq, &lt;span class=&quot;number&quot;&gt;20%&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.article-share-renren&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @extend &lt;span class=&quot;variable&quot;&gt;$article&lt;/span&gt;-share-link&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;amp;:before&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;\f18b&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;amp;:hover&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: color-renren&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-shadow&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; darken(color-renren, &lt;span class=&quot;number&quot;&gt;20%&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.article-share-wechat&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @extend &lt;span class=&quot;variable&quot;&gt;$article&lt;/span&gt;-share-link&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;amp;:before&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;\f1d7&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;amp;:hover&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: color-wechat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-shadow&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; darken(color-wechat, &lt;span class=&quot;number&quot;&gt;20%&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后，找到 &lt;code&gt;themes\landscape\source\css\_variables.styl&lt;/code&gt; 中 Colors 部分（16行），最后四行分别为社交网站图标的背景色，可根据这些网站的主题色修改。&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;-sina = &lt;span class=&quot;number&quot;&gt;#ff8140&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;-qq = &lt;span class=&quot;number&quot;&gt;#ffcc33&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;-renren = &lt;span class=&quot;number&quot;&gt;#227dc5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;-wechat = &lt;span class=&quot;number&quot;&gt;#44b549&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-2加入百度分享&quot;&gt;&lt;a href=&quot;#2-2加入百度分享&quot; class=&quot;headerlink&quot; title=&quot;2.2加入百度分享&quot;&gt;&lt;/a&gt;2.2加入百度分享&lt;/h4&gt;&lt;p&gt;首先在_config.yml中增加bdshare_shortname: 你站点的short_name，这里的short_name也就是你的二级域名。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bdshare_shortname: http://chaooo.github.io/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在百度分享获取代码后，代码可分为两部分。&lt;br&gt;在&lt;code&gt;themes\landscape\layout\_partial\article.ejs&lt;/code&gt;中第26行插入第一段代码并添加判断条件，若当前页为文章展开页则显示百度分享框，若是缩略则采用原生分享链接，避免百度分享框获取的 URL 错误：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;attr&quot;&gt;page.layout&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&#39;post&#39;&lt;/span&gt;|| &lt;span class=&quot;attr&quot;&gt;page.layout&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&#39;page&#39;&lt;/span&gt;))&amp;#123; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bdsharebuttonbox&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;float:left;line-height:16px;height:16px;margin: 6px 6px 6px 0;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;分享到：&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;分享到新浪微博&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bds_tsina&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-cmd&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;tsina&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;分享到QQ空间&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bds_qzone&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-cmd&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;qzone&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;分享到微信&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bds_weixin&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-cmd&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;weixin&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;分享到人人网&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bds_renren&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-cmd&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;renren&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;分享到Facebook&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bds_fbook&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-cmd&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;fbook&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;分享到一键分享&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bds_mshare&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-cmd&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;mshare&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bds_more&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-cmd&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;more&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &amp;#125; &lt;span class=&quot;attr&quot;&gt;else&lt;/span&gt; &amp;#123; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-url&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;%- post.permalink %&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;%= post._id %&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;article-share-link&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;__&lt;/span&gt;(&#39;&lt;span class=&quot;attr&quot;&gt;share&lt;/span&gt;&#39;) %&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &amp;#125; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Baidu Share Start --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;._bd_share_config=&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;common&quot;&lt;/span&gt;:&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;bdSnsKey&quot;&lt;/span&gt;:&amp;#123;&amp;#125;,&lt;span class=&quot;string&quot;&gt;&quot;bdText&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;好东西就要一起分享~&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;bdMini&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;bdMiniList&quot;&lt;/span&gt;:[&lt;span class=&quot;string&quot;&gt;&quot;mshare&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;qzone&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;tsina&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;weixin&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;sqq&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;douban&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;tqq&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;renren&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;kaixin001&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;tqf&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;linkedin&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;ty&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;fbook&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;twi&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;copy&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;print&quot;&lt;/span&gt;],&lt;span class=&quot;string&quot;&gt;&quot;bdPic&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;bdStyle&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;bdSize&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;16&quot;&lt;/span&gt;&amp;#125;,&lt;span class=&quot;string&quot;&gt;&quot;share&quot;&lt;/span&gt;:&amp;#123;&amp;#125;,&lt;span class=&quot;string&quot;&gt;&quot;image&quot;&lt;/span&gt;:&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;viewList&quot;&lt;/span&gt;:[&lt;span class=&quot;string&quot;&gt;&quot;mshare&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;weixin&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;qzone&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;tsina&quot;&lt;/span&gt;],&lt;span class=&quot;string&quot;&gt;&quot;viewText&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;分享到：&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;viewSize&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;16&quot;&lt;/span&gt;&amp;#125;,&lt;span class=&quot;string&quot;&gt;&quot;selectShare&quot;&lt;/span&gt;:&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;bdContainerClass&quot;&lt;/span&gt;:&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;bdSelectMiniList&quot;&lt;/span&gt;:[&lt;span class=&quot;string&quot;&gt;&quot;mshare&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;weixin&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;qzone&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;tsina&quot;&lt;/span&gt;]&amp;#125;&amp;#125;;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;[(getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&#39;head&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]||body).appendChild(createElement(&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;)).src=&lt;span class=&quot;string&quot;&gt;&#39;http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=&#39;&lt;/span&gt;+~(-&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()/&lt;span class=&quot;number&quot;&gt;36e5&lt;/span&gt;)];&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Baidu Share End --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-加入多说评论&quot;&gt;&lt;a href=&quot;#3-加入多说评论&quot; class=&quot;headerlink&quot; title=&quot;3.加入多说评论&quot;&gt;&lt;/a&gt;3.加入多说评论&lt;/h3&gt;&lt;p&gt;首先在_config.yml中增加duoshuo_shortname: 你站点的short_name，这里的short_name也就是你的二级域名。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;duoshuo_shortname: http://chaooo.github.io/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果使用的是默认的landscape主题只需要修改&lt;code&gt;themes\landscape\layout\_partial\article.ejs&lt;/code&gt;中的disqus评论：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;attr&quot;&gt;index&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;attr&quot;&gt;post.comments&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;attr&quot;&gt;config.disqus_shortname&lt;/span&gt;)&amp;#123; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;comments&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;disqus_thread&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;noscript&lt;/span&gt;&amp;gt;&lt;/span&gt;Please enable JavaScript to view the &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;//disqus.com/?ref_noscript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;comments powered by Disqus.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;noscript&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &amp;#125; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;改为多说评论：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;attr&quot;&gt;index&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;attr&quot;&gt;post.comments&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;attr&quot;&gt;config.duoshuo_shortname&lt;/span&gt;)&amp;#123; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;comments&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 多说评论框 start --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ds-thread&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-thread-key&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;%= post.path %&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;%= post.title %&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-url&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;%= post.url %&amp;gt;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 多说评论框 end --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; duoshuoQuery = &amp;#123;short_name:&lt;span class=&quot;string&quot;&gt;&quot;chaooo&quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ds = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ds.type = &lt;span class=&quot;string&quot;&gt;&#39;text/javascript&#39;&lt;/span&gt;;ds.async = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ds.src = (&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.location.protocol == &lt;span class=&quot;string&quot;&gt;&#39;https:&#39;&lt;/span&gt; ? &lt;span class=&quot;string&quot;&gt;&#39;https:&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;http:&#39;&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&#39;//static.duoshuo.com/embed.js&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ds.charset = &lt;span class=&quot;string&quot;&gt;&#39;UTF-8&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&#39;head&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     || &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&#39;body&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]).appendChild(ds);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 多说公共JS代码 end --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &amp;#125; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果是其他主题，也只需要修改主题\layout_partial\comment.ejs&lt;br&gt;注意&lt;code&gt;多说的Thread Key一定不要改变，Thread Key相当于是识别码；如果改变了的话，评论清空。&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-侧栏微博秀&quot;&gt;&lt;a href=&quot;#4-侧栏微博秀&quot; class=&quot;headerlink&quot; title=&quot;4. 侧栏微博秀&quot;&gt;&lt;/a&gt;4. 侧栏微博秀&lt;/h3&gt;&lt;p&gt;登录&lt;a href=&quot;http://app.weibo.com/tool/weiboshow&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;新浪微博开放平台&lt;/a&gt;来获取微博秀的代码，将其样式调整与主题一致，关掉各种边框和标题栏。然后新建themes/landscape/layout/_widget/weibo.ejs这个文件，将刚刚获取到的代码添加到这个文件中。最后编辑themes/landscape/_config.yml，在widgets:标签后面的适当位置添加- weibo。这样微博秀应该就可以显示在你的博客上了。&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;widget-wrap&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;widget-title&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;微博&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;widget&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;padding: 0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;iframe&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;400&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;share_self&quot;&lt;/span&gt;  &lt;span class=&quot;attr&quot;&gt;frameborder&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;scrolling&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;no&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://widget.weibo.com/weiboshow/index.php?language=&amp;amp;width=0&amp;amp;height=400&amp;amp;fansRow=2&amp;amp;ptype=1&amp;amp;speed=0&amp;amp;skin=2&amp;amp;isTitle=0&amp;amp;noborder=0&amp;amp;isWeibo=1&amp;amp;isFans=0&amp;amp;uid=1700139362&amp;amp;verifier=85be6061&amp;amp;colors=d6f3f7,dddddd,555555,837f86,cccccc&amp;amp;dpc=1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;iframe&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;code&gt;&amp;lt;iframe...&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;为获取微博秀的代码。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;继上一篇&lt;a href=&quot;Hexo3-2-github搭建静态博客.html&quot;&gt;Hexo3.2+GitHub搭建静态博客&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;1-主题&quot;&gt;&lt;a href=&quot;#1-主题&quot; class=&quot;headerlink&quot; title=&quot;1.主题&quot;&gt;&lt;/a&gt;1.主题&lt;/h3&gt;&lt;p&gt;Hexo提供了很多主题，具体可参见&lt;a href=&quot;https://hexo.io/themes/&quot;&gt;Themes|Hexo&lt;/a&gt;，这里我选择默认主题&lt;a href=&quot;https://github.com/hexojs/hexo-theme-landscape&quot;&gt;landscape&lt;/a&gt;(此主题默认已安装)。&lt;/p&gt;
&lt;h4 id=&quot;1-1安装主题&quot;&gt;&lt;a href=&quot;#1-1安装主题&quot; class=&quot;headerlink&quot; title=&quot;1.1安装主题&quot;&gt;&lt;/a&gt;1.1安装主题&lt;/h4&gt;&lt;p&gt;将Git Shell切换到根目录，执行下列命令，将主题下载到themes/spfk目录下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/hexojs/hexo-theme-landscape.git themes/landscape&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;获取landscape主题的最新版本：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; themes/landscape&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git pull&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改在根目录下_config.yml 配置：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;theme: landscape&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-修改添加分享链接&quot;&gt;&lt;a href=&quot;#2-修改添加分享链接&quot; class=&quot;headerlink&quot; title=&quot;2.修改添加分享链接&quot;&gt;&lt;/a&gt;2.修改添加分享链接&lt;/h3&gt;&lt;h4 id=&quot;2-1原生分享的修改&quot;&gt;&lt;a href=&quot;#2-1原生分享的修改&quot; class=&quot;headerlink&quot; title=&quot;2.1原生分享的修改&quot;&gt;&lt;/a&gt;2.1原生分享的修改&lt;/h4&gt;&lt;p&gt;在&lt;code&gt;themes\landscape\source\js\script.js&lt;/code&gt;中，57行 &lt;code&gt;&amp;lt;div class=&amp;quot;article-share-links&amp;quot;&amp;gt;&lt;/code&gt;下面的四个链接就是 Facebook 等社交网站的分享链接。将其替换或添加如下代码，即可实现分享到国内社交网站：&lt;br&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://chaooo.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo3.2+GitHub搭建静态博客</title>
    <link href="http://chaooo.github.io/2016/05/23/Hexo3-2-github%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2.html"/>
    <id>http://chaooo.github.io/2016/05/23/Hexo3-2-github搭建静态博客.html</id>
    <published>2016-05-23T03:16:51.000Z</published>
    <updated>2016-05-26T01:21:44.721Z</updated>
    
    <content type="html">&lt;h3 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h3&gt;&lt;p&gt;在安装&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo&lt;/a&gt;之前，必须确认你已经安装了&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;和&lt;a href=&quot;http://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;1-创建GitHub仓库&quot;&gt;&lt;a href=&quot;#1-创建GitHub仓库&quot; class=&quot;headerlink&quot; title=&quot;1.创建GitHub仓库&quot;&gt;&lt;/a&gt;1.创建GitHub仓库&lt;/h4&gt;&lt;p&gt;注册&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;账号，创建一个以”用户名.github.io”命名的仓库，如我的用户名为chaooo,那我的仓库名为：&lt;a href=&quot;https://github.com/chaooo/chaooo.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;chaooo.github.io&lt;/a&gt;，仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。&lt;/p&gt;
&lt;h4 id=&quot;2-配置Git&quot;&gt;&lt;a href=&quot;#2-配置Git&quot; class=&quot;headerlink&quot; title=&quot;2.配置Git&quot;&gt;&lt;/a&gt;2.配置Git&lt;/h4&gt;&lt;p&gt;设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global user.name &lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global user.email &lt;span class=&quot;string&quot;&gt;&quot;email@example.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-本地Git与GitHub建立联系&quot;&gt;&lt;a href=&quot;#3-本地Git与GitHub建立联系&quot; class=&quot;headerlink&quot; title=&quot;3.本地Git与GitHub建立联系&quot;&gt;&lt;/a&gt;3.本地Git与GitHub建立联系&lt;/h4&gt;&lt;p&gt;这里介绍SSH的配置，先检查电脑是否已经有SSH&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ls -al ~/.ssh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。&lt;br&gt;输入以下指令后，一路回车就好：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ssh-keygen -t rsa -C &lt;span class=&quot;string&quot;&gt;&quot;emailt@example.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后键入以下指令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ssh-agent &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ssh-add ~/.ssh/id_rsa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果出现这个错误:&lt;code&gt;Could not open a connection to your authentication agent&lt;/code&gt;，则先执行如下命令即可：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ssh-agent bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再重新输入指令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ssh-add ~/.ssh/id_rsa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ clip &amp;lt; ~/.ssh/id_rsa.pub&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在github上点击你的头像–&amp;gt;Your profile–&amp;gt;Edit profile–&amp;gt;SSH and GPG keys–&amp;gt;New SSH key&lt;br&gt;Title自己随便取，然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后Add SSH key。&lt;br&gt;最后还是测试一下吧，键入以下命令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ssh -T git@github.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可能会看到有警告，没事，输入“yes”就好。&lt;/p&gt;
&lt;h4 id=&quot;4-初始化hexo文件夹&quot;&gt;&lt;a href=&quot;#4-初始化hexo文件夹&quot; class=&quot;headerlink&quot; title=&quot;4.初始化hexo文件夹&quot;&gt;&lt;/a&gt;4.初始化hexo文件夹&lt;/h4&gt;&lt;p&gt;到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址。&lt;br&gt;在E盘或是你喜爱的文件夹下，右键Git Bash Here: 键入git clone -b develop &amp;lt;刚复制的地址&amp;gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; -b develop https://github.com/chaooo/chaooo.github.io.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir Hexo-admin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Hexo安装配置&quot;&gt;&lt;a href=&quot;#Hexo安装配置&quot; class=&quot;headerlink&quot; title=&quot;Hexo安装配置&quot;&gt;&lt;/a&gt;Hexo安装配置&lt;/h3&gt;&lt;h4 id=&quot;1-Hexo初始化&quot;&gt;&lt;a href=&quot;#1-Hexo初始化&quot; class=&quot;headerlink&quot; title=&quot;1.Hexo初始化&quot;&gt;&lt;/a&gt;1.Hexo初始化&lt;/h4&gt;&lt;p&gt;进入Hexo-admin文件夹&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; Hexo-admin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来只需要使用 npm 即可完成 Hexo 的安装:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g hexo-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来也可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000看看。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输入Ctrl+C停止服务。&lt;/p&gt;
&lt;h4 id=&quot;2-Hexo配置&quot;&gt;&lt;a href=&quot;#2-Hexo配置&quot; class=&quot;headerlink&quot; title=&quot;2.Hexo配置&quot;&gt;&lt;/a&gt;2.Hexo配置&lt;/h4&gt;&lt;p&gt;用编辑器打开 Hexo-admin/ 下的配置文件_config.yml找到：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Deployment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## Docs: https://hexo.io/docs/deployment.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deploy:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repository:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址到repository:，添加branch: master。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Deployment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## Docs: https://hexo.io/docs/deployment.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deploy:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repository: https://github.com/chaooo/chaooo.github.io.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  branch: master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-完成部署&quot;&gt;&lt;a href=&quot;#3-完成部署&quot; class=&quot;headerlink&quot; title=&quot;3.完成部署&quot;&gt;&lt;/a&gt;3.完成部署&lt;/h4&gt;&lt;p&gt;最后一步，快要成功了，键入指令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install hexo-deployer-git --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输入弹出框的用户名与密码(首次使用git会弹出)。&lt;br&gt;OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的Repository名），例如我的：&lt;a href=&quot;http://chaooo.github.io/&quot;&gt;chaooo.github.io/&lt;/a&gt;&lt;br&gt;每次修改本地文件后，需要键入hexo generate才能保存，再键入hexo deploy上传文件。成功之后命令行最后两句大概是这样：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;To https://github.com/chaooo/chaooo.github.io.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   7f3b50a..128a10d  HEAD -&amp;gt; master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO  Deploy &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;: git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然，不要忘了回退到父文件夹提交网站相关的文件以备今后迁移，依次执行git add .、git commit -m “…”、git push origin develop。&lt;/p&gt;
&lt;h3 id=&quot;日常操作&quot;&gt;&lt;a href=&quot;#日常操作&quot; class=&quot;headerlink&quot; title=&quot;日常操作&quot;&gt;&lt;/a&gt;日常操作&lt;/h3&gt;&lt;h4 id=&quot;1-写文章&quot;&gt;&lt;a href=&quot;#1-写文章&quot; class=&quot;headerlink&quot; title=&quot;1.写文章&quot;&gt;&lt;/a&gt;1.写文章&lt;/h4&gt;&lt;p&gt;执行new命令，生成指定名称的文章至 Admin-blog\source_posts\文章标题.md 。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new [layout] &lt;span class=&quot;string&quot;&gt;&quot;文章标题&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#新建文章&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后用编辑器打开“文章标题.md”按照&lt;a href=&quot;http://www.appinn.com/markdown/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown语法&lt;/a&gt;书写文章。&lt;br&gt; 其中layout是可选参数，默认值为post。到 scaffolds 目录下查看现有的layout。当然你可以添加自己的layout，&lt;br&gt; 同时你也可以编辑现有的layout，比如post的layout默认是 hexo\scaffolds\post.md&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;title: &amp;#123; &amp;#123; title &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;date: &amp;#123; &amp;#123; date &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tags:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;title: &amp;#123; &amp;#123; title &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;date: &amp;#123; &amp;#123; date &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;categories:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tags:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;文件标题也是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围。&lt;br&gt;&lt;code&gt;请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示；所有文件&amp;quot;：&amp;quot;后面都必须有个空格，不然会报错。&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-提交&quot;&gt;&lt;a href=&quot;#2-提交&quot; class=&quot;headerlink&quot; title=&quot;2.提交&quot;&gt;&lt;/a&gt;2.提交&lt;/h4&gt;&lt;p&gt;每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git commit -m &lt;span class=&quot;string&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git push origin develop&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后才执行hexo generate -d发布网站到master分支上。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-本地仓库丢失&quot;&gt;&lt;a href=&quot;#3-本地仓库丢失&quot; class=&quot;headerlink&quot; title=&quot;3.本地仓库丢失&quot;&gt;&lt;/a&gt;3.本地仓库丢失&lt;/h4&gt;&lt;p&gt;当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：&lt;/p&gt;
&lt;h5 id=&quot;3-1拷贝仓库&quot;&gt;&lt;a href=&quot;#3-1拷贝仓库&quot; class=&quot;headerlink&quot; title=&quot;3.1拷贝仓库&quot;&gt;&lt;/a&gt;3.1拷贝仓库&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; -b develop https://github.com/chaooo/chaooo.github.io.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;3-2配置Hexo&quot;&gt;&lt;a href=&quot;#3-2配置Hexo&quot; class=&quot;headerlink&quot; title=&quot;3.2配置Hexo&quot;&gt;&lt;/a&gt;3.2配置Hexo&lt;/h5&gt;&lt;p&gt;在本地新拷贝的chaooo.github.io文件夹下通过Git bash依次执行下列指令:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g hexo-cli&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm install hexo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm install hexo-deployer-git --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;小Tips-hexo-命令&quot;&gt;&lt;a href=&quot;#小Tips-hexo-命令&quot; class=&quot;headerlink&quot; title=&quot;小Tips:hexo 命令&quot;&gt;&lt;/a&gt;小Tips:hexo 命令&lt;/h5&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo new &lt;span class=&quot;string&quot;&gt;&quot;postName&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#新建文章&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo new page &lt;span class=&quot;string&quot;&gt;&quot;pageName&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#新建页面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo generate &lt;span class=&quot;comment&quot;&gt;#生成静态页面至public目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo server &lt;span class=&quot;comment&quot;&gt;#开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo deploy &lt;span class=&quot;comment&quot;&gt;#将.deploy目录部署到GitHub&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo &lt;span class=&quot;built_in&quot;&gt;help&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 查看帮助&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo version  &lt;span class=&quot;comment&quot;&gt;#查看Hexo的版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo deploy -g  &lt;span class=&quot;comment&quot;&gt;#生成加部署&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo server -g  &lt;span class=&quot;comment&quot;&gt;#生成加预览&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#命令的简写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo n == hexo new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo g == hexo generate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo s == hexo server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo d == hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h3&gt;&lt;p&gt;在安装&lt;a href=&quot;https://hexo.io/zh-cn/&quot;&gt;hexo&lt;/a&gt;之前，必须确认你已经安装了&lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;和&lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;1-创建GitHub仓库&quot;&gt;&lt;a href=&quot;#1-创建GitHub仓库&quot; class=&quot;headerlink&quot; title=&quot;1.创建GitHub仓库&quot;&gt;&lt;/a&gt;1.创建GitHub仓库&lt;/h4&gt;&lt;p&gt;注册&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;账号，创建一个以”用户名.github.io”命名的仓库，如我的用户名为chaooo,那我的仓库名为：&lt;a href=&quot;https://github.com/chaooo/chaooo.github.io&quot;&gt;chaooo.github.io&lt;/a&gt;，仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。&lt;/p&gt;
&lt;h4 id=&quot;2-配置Git&quot;&gt;&lt;a href=&quot;#2-配置Git&quot; class=&quot;headerlink&quot; title=&quot;2.配置Git&quot;&gt;&lt;/a&gt;2.配置Git&lt;/h4&gt;&lt;p&gt;设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global user.name &lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global user.email &lt;span class=&quot;string&quot;&gt;&quot;email@example.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-本地Git与GitHub建立联系&quot;&gt;&lt;a href=&quot;#3-本地Git与GitHub建立联系&quot; class=&quot;headerlink&quot; title=&quot;3.本地Git与GitHub建立联系&quot;&gt;&lt;/a&gt;3.本地Git与GitHub建立联系&lt;/h4&gt;&lt;p&gt;这里介绍SSH的配置，先检查电脑是否已经有SSH&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ls -al ~/.ssh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。&lt;br&gt;输入以下指令后，一路回车就好：&lt;br&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://chaooo.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
